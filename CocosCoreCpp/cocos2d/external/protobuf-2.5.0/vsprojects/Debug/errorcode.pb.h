// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: errorcode.proto

#ifndef PROTOBUF_errorcode_2eproto__INCLUDED
#define PROTOBUF_errorcode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_errorcode_2eproto();
void protobuf_AssignDesc_errorcode_2eproto();
void protobuf_ShutdownFile_errorcode_2eproto();


enum ErrorCode {
  ERROR_NONE = 0,
  ERROR_SERVER_CLOSING = 1,
  ERROR_SERVER_MAINTAINING = 2,
  ERROR_SYSTEM_ERROR = 5,
  ERROR_BAD_REQUEST = 6,
  ERROR_PROTOCOL_UNMATCHED = 7,
  ERROR_SYSTEM_NOT_UNLOCK = 8,
  ERROR_USER_NOT_LOGIN = 11,
  ERROR_USER_FORBIDDEN = 12,
  ERROR_USER_WAITING_RESPONSE = 13,
  ERROR_PLAYER_NOT_EXIST = 20,
  ERROR_PLAYERNAME_EXIST = 21,
  ERROR_PLAYER_ALREADY_CREATED = 22,
  ERROR_NICKNAME_INVALID = 23,
  ERROR_PLAYER_NOT_LOGIN = 24,
  ERROR_NICKNAME_EXIST = 25
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = ERROR_NONE;
const ErrorCode ErrorCode_MAX = ERROR_NICKNAME_EXIST;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ErrorCode>() {
  return ::pb::ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_errorcode_2eproto__INCLUDED
