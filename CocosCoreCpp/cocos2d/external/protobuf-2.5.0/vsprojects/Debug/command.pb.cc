// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "command.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* C2GS_PingPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_PingPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PingPong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PingPong_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_PingPongAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_PingPongAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_PingPongAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_PingPongAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Login_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_JoinTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_JoinTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_JoinTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_JoinTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_JoinTableBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_JoinTableBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_JoinTableBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_JoinTableBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_BreakBackBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_BreakBackBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_BreakBackBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_BreakBackBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_LeaveTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_LeaveTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LeaveTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LeaveTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_LeaveTableBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_LeaveTableBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_LeaveTableBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_LeaveTableBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_BreakBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_BreakBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_BreakBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_BreakBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_StartReplaceBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_StartReplaceBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_StartReplaceBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_StartReplaceBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_RoundStartBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_RoundStartBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_RoundStartBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_RoundStartBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_DispatchBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_DispatchBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DispatchBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DispatchBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Out_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Out_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Out_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_OutBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_OutBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_OutBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_OutBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_OperateAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_OperateAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_OperateAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_OperateAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Operate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Operate_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_OperateResultBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_OperateResultBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_OperateResultBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_OperateResultBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_MinglouAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_MinglouAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_MinglouAsk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MinglouAsk_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Minglou_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Minglou_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Minglou_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Minglou_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_MinglouBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_MinglouBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_MinglouBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_MinglouBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Chat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Chat_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ChatBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ChatBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ChatBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ChatBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_RoundResultBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_RoundResultBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_RoundResultBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_RoundResultBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_HistoryBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_HistoryBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_HistoryBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_HistoryBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_DismissAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_DismissAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DismissAskBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DismissAskBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_DismissAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_DismissAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DismissAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DismissAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_DismissAnswerBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_DismissAnswerBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DismissAnswerBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DismissAnswerBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_DismissBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_DismissBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_DismissBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_DismissBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_VoiceTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_VoiceTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_VoiceTalk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_VoiceTalk_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_VoiceTalkBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_VoiceTalkBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_VoiceTalkBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_VoiceTalkBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ChatCustom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ChatCustom_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ChatCustom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ChatCustom_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ChatCustomBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ChatCustomBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ChatCustomBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ChatCustomBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_Ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_Ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_Ready_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_Ready_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_ReadyBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_ReadyBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_ReadyBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_ReadyBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2GS_GetJuCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2GS_GetJuCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2C_GetJuCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2C_GetJuCnt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_command_2eproto() {
  protobuf_AddDesc_command_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "command.proto");
  GOOGLE_CHECK(file != NULL);
  C2GS_PingPong_descriptor_ = file->message_type(0);
  static const int C2GS_PingPong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PingPong, uid_),
  };
  C2GS_PingPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_PingPong_descriptor_,
      C2GS_PingPong::default_instance_,
      C2GS_PingPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PingPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PingPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_PingPong));
  GS2C_PingPong_descriptor_ = file->message_type(1);
  static const int GS2C_PingPong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPong, errorcode_),
  };
  GS2C_PingPong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PingPong_descriptor_,
      GS2C_PingPong::default_instance_,
      GS2C_PingPong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PingPong));
  C2GS_PingPongAskBroadcast_descriptor_ = file->message_type(2);
  static const int C2GS_PingPongAskBroadcast_offsets_[1] = {
  };
  C2GS_PingPongAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_PingPongAskBroadcast_descriptor_,
      C2GS_PingPongAskBroadcast::default_instance_,
      C2GS_PingPongAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PingPongAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_PingPongAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_PingPongAskBroadcast));
  GS2C_PingPongAskBroadcast_descriptor_ = file->message_type(3);
  static const int GS2C_PingPongAskBroadcast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPongAskBroadcast, errorcode_),
  };
  GS2C_PingPongAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_PingPongAskBroadcast_descriptor_,
      GS2C_PingPongAskBroadcast::default_instance_,
      GS2C_PingPongAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPongAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_PingPongAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_PingPongAskBroadcast));
  C2GS_Login_descriptor_ = file->message_type(4);
  static const int C2GS_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Login, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Login, table_id_),
  };
  C2GS_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Login_descriptor_,
      C2GS_Login::default_instance_,
      C2GS_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Login));
  GS2C_Login_descriptor_ = file->message_type(5);
  static const int GS2C_Login_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Login, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Login, session_id_),
  };
  GS2C_Login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Login_descriptor_,
      GS2C_Login::default_instance_,
      GS2C_Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Login));
  C2GS_JoinTable_descriptor_ = file->message_type(6);
  static const int C2GS_JoinTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTable, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTable, seat_id_),
  };
  C2GS_JoinTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_JoinTable_descriptor_,
      C2GS_JoinTable::default_instance_,
      C2GS_JoinTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_JoinTable));
  UsrInfo_descriptor_ = file->message_type(7);
  static const int UsrInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, weichat_nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, weichat_face_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, big_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, seatid_),
  };
  UsrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsrInfo_descriptor_,
      UsrInfo::default_instance_,
      UsrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsrInfo));
  WeaveItem_descriptor_ = file->message_type(8);
  static const int WeaveItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaveItem, weave_kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaveItem, cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaveItem, is_angang_),
  };
  WeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaveItem_descriptor_,
      WeaveItem::default_instance_,
      WeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaveItem));
  ReconnectItem_descriptor_ = file->message_type(9);
  static const int ReconnectItem_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, hand_cnts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, weaves1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, weaves2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, weaves3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, weaves4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, dismiss_cards_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, dismiss_cards_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, dismiss_cards_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, dismiss_cards_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, minglou_cards_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, minglou_cards_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, minglou_cards_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, minglou_cards_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, current_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, left_card_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, left_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, is_minglous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, hua_cnts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, actions_),
  };
  ReconnectItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectItem_descriptor_,
      ReconnectItem::default_instance_,
      ReconnectItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectItem));
  GS2C_JoinTable_descriptor_ = file->message_type(10);
  static const int GS2C_JoinTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, usr_info_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, reconnect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, banker_uid_),
  };
  GS2C_JoinTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_JoinTable_descriptor_,
      GS2C_JoinTable::default_instance_,
      GS2C_JoinTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_JoinTable));
  C2GS_JoinTableBroadcast_descriptor_ = file->message_type(11);
  static const int C2GS_JoinTableBroadcast_offsets_[1] = {
  };
  C2GS_JoinTableBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_JoinTableBroadcast_descriptor_,
      C2GS_JoinTableBroadcast::default_instance_,
      C2GS_JoinTableBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTableBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_JoinTableBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_JoinTableBroadcast));
  GS2C_JoinTableBroadcast_descriptor_ = file->message_type(12);
  static const int GS2C_JoinTableBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTableBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTableBroadcast, usr_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTableBroadcast, banker_uid_),
  };
  GS2C_JoinTableBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_JoinTableBroadcast_descriptor_,
      GS2C_JoinTableBroadcast::default_instance_,
      GS2C_JoinTableBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTableBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_JoinTableBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_JoinTableBroadcast));
  C2GS_BreakBackBroadcast_descriptor_ = file->message_type(13);
  static const int C2GS_BreakBackBroadcast_offsets_[1] = {
  };
  C2GS_BreakBackBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_BreakBackBroadcast_descriptor_,
      C2GS_BreakBackBroadcast::default_instance_,
      C2GS_BreakBackBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BreakBackBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BreakBackBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_BreakBackBroadcast));
  GS2C_BreakBackBroadcast_descriptor_ = file->message_type(14);
  static const int GS2C_BreakBackBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBackBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBackBroadcast, break_uid_),
  };
  GS2C_BreakBackBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_BreakBackBroadcast_descriptor_,
      GS2C_BreakBackBroadcast::default_instance_,
      GS2C_BreakBackBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBackBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBackBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_BreakBackBroadcast));
  C2GS_LeaveTable_descriptor_ = file->message_type(15);
  static const int C2GS_LeaveTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_LeaveTable, leave_reason_),
  };
  C2GS_LeaveTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_LeaveTable_descriptor_,
      C2GS_LeaveTable::default_instance_,
      C2GS_LeaveTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_LeaveTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_LeaveTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_LeaveTable));
  GS2C_LeaveTable_descriptor_ = file->message_type(16);
  static const int GS2C_LeaveTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTable, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTable, leave_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTable, is_banker_no_dismiss_),
  };
  GS2C_LeaveTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LeaveTable_descriptor_,
      GS2C_LeaveTable::default_instance_,
      GS2C_LeaveTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LeaveTable));
  C2GS_LeaveTableBroadcast_descriptor_ = file->message_type(17);
  static const int C2GS_LeaveTableBroadcast_offsets_[1] = {
  };
  C2GS_LeaveTableBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_LeaveTableBroadcast_descriptor_,
      C2GS_LeaveTableBroadcast::default_instance_,
      C2GS_LeaveTableBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_LeaveTableBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_LeaveTableBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_LeaveTableBroadcast));
  GS2C_LeaveTableBroadcast_descriptor_ = file->message_type(18);
  static const int GS2C_LeaveTableBroadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, leave_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, is_banker_no_dismiss_),
  };
  GS2C_LeaveTableBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_LeaveTableBroadcast_descriptor_,
      GS2C_LeaveTableBroadcast::default_instance_,
      GS2C_LeaveTableBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_LeaveTableBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_LeaveTableBroadcast));
  C2GS_BreakBroadcast_descriptor_ = file->message_type(19);
  static const int C2GS_BreakBroadcast_offsets_[1] = {
  };
  C2GS_BreakBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_BreakBroadcast_descriptor_,
      C2GS_BreakBroadcast::default_instance_,
      C2GS_BreakBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BreakBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_BreakBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_BreakBroadcast));
  GS2C_BreakBroadcast_descriptor_ = file->message_type(20);
  static const int GS2C_BreakBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBroadcast, uid_),
  };
  GS2C_BreakBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_BreakBroadcast_descriptor_,
      GS2C_BreakBroadcast::default_instance_,
      GS2C_BreakBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_BreakBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_BreakBroadcast));
  C2GS_StartReplaceBroadcast_descriptor_ = file->message_type(21);
  static const int C2GS_StartReplaceBroadcast_offsets_[1] = {
  };
  C2GS_StartReplaceBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_StartReplaceBroadcast_descriptor_,
      C2GS_StartReplaceBroadcast::default_instance_,
      C2GS_StartReplaceBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartReplaceBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_StartReplaceBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_StartReplaceBroadcast));
  GS2C_StartReplaceBroadcast_descriptor_ = file->message_type(22);
  static const int GS2C_StartReplaceBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartReplaceBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartReplaceBroadcast, replace_uids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartReplaceBroadcast, card_cnt_reals_),
  };
  GS2C_StartReplaceBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_StartReplaceBroadcast_descriptor_,
      GS2C_StartReplaceBroadcast::default_instance_,
      GS2C_StartReplaceBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartReplaceBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_StartReplaceBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_StartReplaceBroadcast));
  C2GS_RoundStartBroadcast_descriptor_ = file->message_type(23);
  static const int C2GS_RoundStartBroadcast_offsets_[1] = {
  };
  C2GS_RoundStartBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_RoundStartBroadcast_descriptor_,
      C2GS_RoundStartBroadcast::default_instance_,
      C2GS_RoundStartBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_RoundStartBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_RoundStartBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_RoundStartBroadcast));
  GS2C_RoundStartBroadcast_descriptor_ = file->message_type(24);
  static const int GS2C_RoundStartBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, left_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, left_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, gold_now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, banker_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, hand_cards_),
  };
  GS2C_RoundStartBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_RoundStartBroadcast_descriptor_,
      GS2C_RoundStartBroadcast::default_instance_,
      GS2C_RoundStartBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundStartBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_RoundStartBroadcast));
  C2GS_DispatchBroadcast_descriptor_ = file->message_type(25);
  static const int C2GS_DispatchBroadcast_offsets_[1] = {
  };
  C2GS_DispatchBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_DispatchBroadcast_descriptor_,
      C2GS_DispatchBroadcast::default_instance_,
      C2GS_DispatchBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DispatchBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DispatchBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_DispatchBroadcast));
  GS2C_DispatchBroadcast_descriptor_ = file->message_type(26);
  static const int GS2C_DispatchBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, dispatch_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, left_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, is_hu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, is_gang_),
  };
  GS2C_DispatchBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DispatchBroadcast_descriptor_,
      GS2C_DispatchBroadcast::default_instance_,
      GS2C_DispatchBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DispatchBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DispatchBroadcast));
  C2GS_Out_descriptor_ = file->message_type(27);
  static const int C2GS_Out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Out, card_),
  };
  C2GS_Out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Out_descriptor_,
      C2GS_Out::default_instance_,
      C2GS_Out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Out));
  GS2C_Out_descriptor_ = file->message_type(28);
  static const int GS2C_Out_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Out, errorcode_),
  };
  GS2C_Out_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Out_descriptor_,
      GS2C_Out::default_instance_,
      GS2C_Out_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Out, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Out, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Out));
  C2GS_OutBroadcast_descriptor_ = file->message_type(29);
  static const int C2GS_OutBroadcast_offsets_[1] = {
  };
  C2GS_OutBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_OutBroadcast_descriptor_,
      C2GS_OutBroadcast::default_instance_,
      C2GS_OutBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OutBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OutBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_OutBroadcast));
  GS2C_OutBroadcast_descriptor_ = file->message_type(30);
  static const int GS2C_OutBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OutBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OutBroadcast, out_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OutBroadcast, card_),
  };
  GS2C_OutBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_OutBroadcast_descriptor_,
      GS2C_OutBroadcast::default_instance_,
      GS2C_OutBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OutBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OutBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_OutBroadcast));
  C2GS_OperateAskBroadcast_descriptor_ = file->message_type(31);
  static const int C2GS_OperateAskBroadcast_offsets_[1] = {
  };
  C2GS_OperateAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_OperateAskBroadcast_descriptor_,
      C2GS_OperateAskBroadcast::default_instance_,
      C2GS_OperateAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OperateAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OperateAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_OperateAskBroadcast));
  GS2C_OperateAskBroadcast_descriptor_ = file->message_type(32);
  static const int GS2C_OperateAskBroadcast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, resume_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, action_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, gang_cards_),
  };
  GS2C_OperateAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_OperateAskBroadcast_descriptor_,
      GS2C_OperateAskBroadcast::default_instance_,
      GS2C_OperateAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_OperateAskBroadcast));
  C2GS_Operate_descriptor_ = file->message_type(33);
  static const int C2GS_Operate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Operate, operate_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Operate, operate_cards_),
  };
  C2GS_Operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Operate_descriptor_,
      C2GS_Operate::default_instance_,
      C2GS_Operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Operate));
  GS2C_Operate_descriptor_ = file->message_type(34);
  static const int GS2C_Operate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Operate, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Operate, operate_code_),
  };
  GS2C_Operate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Operate_descriptor_,
      GS2C_Operate::default_instance_,
      GS2C_Operate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Operate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Operate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Operate));
  C2GS_OperateResultBroadcast_descriptor_ = file->message_type(35);
  static const int C2GS_OperateResultBroadcast_offsets_[1] = {
  };
  C2GS_OperateResultBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_OperateResultBroadcast_descriptor_,
      C2GS_OperateResultBroadcast::default_instance_,
      C2GS_OperateResultBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OperateResultBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_OperateResultBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_OperateResultBroadcast));
  GS2C_OperateResultBroadcast_descriptor_ = file->message_type(36);
  static const int GS2C_OperateResultBroadcast_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, operate_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, provide_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, operate_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, operate_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, is_angang_),
  };
  GS2C_OperateResultBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_OperateResultBroadcast_descriptor_,
      GS2C_OperateResultBroadcast::default_instance_,
      GS2C_OperateResultBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_OperateResultBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_OperateResultBroadcast));
  C2GS_MinglouAsk_descriptor_ = file->message_type(37);
  static const int C2GS_MinglouAsk_offsets_[1] = {
  };
  C2GS_MinglouAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_MinglouAsk_descriptor_,
      C2GS_MinglouAsk::default_instance_,
      C2GS_MinglouAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MinglouAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MinglouAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_MinglouAsk));
  GS2C_MinglouAsk_descriptor_ = file->message_type(38);
  static const int GS2C_MinglouAsk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouAsk, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouAsk, can_discard_cards_),
  };
  GS2C_MinglouAsk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MinglouAsk_descriptor_,
      GS2C_MinglouAsk::default_instance_,
      GS2C_MinglouAsk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouAsk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouAsk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MinglouAsk));
  C2GS_Minglou_descriptor_ = file->message_type(39);
  static const int C2GS_Minglou_offsets_[1] = {
  };
  C2GS_Minglou_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Minglou_descriptor_,
      C2GS_Minglou::default_instance_,
      C2GS_Minglou_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Minglou, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Minglou, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Minglou));
  GS2C_Minglou_descriptor_ = file->message_type(40);
  static const int GS2C_Minglou_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Minglou, errorcode_),
  };
  GS2C_Minglou_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Minglou_descriptor_,
      GS2C_Minglou::default_instance_,
      GS2C_Minglou_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Minglou, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Minglou, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Minglou));
  C2GS_MinglouBroadcast_descriptor_ = file->message_type(41);
  static const int C2GS_MinglouBroadcast_offsets_[1] = {
  };
  C2GS_MinglouBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_MinglouBroadcast_descriptor_,
      C2GS_MinglouBroadcast::default_instance_,
      C2GS_MinglouBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MinglouBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_MinglouBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_MinglouBroadcast));
  GS2C_MinglouBroadcast_descriptor_ = file->message_type(42);
  static const int GS2C_MinglouBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouBroadcast, minglou_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouBroadcast, minglou_cards_),
  };
  GS2C_MinglouBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_MinglouBroadcast_descriptor_,
      GS2C_MinglouBroadcast::default_instance_,
      GS2C_MinglouBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_MinglouBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_MinglouBroadcast));
  C2GS_Chat_descriptor_ = file->message_type(43);
  static const int C2GS_Chat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, chat_index_),
  };
  C2GS_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Chat_descriptor_,
      C2GS_Chat::default_instance_,
      C2GS_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Chat));
  GS2C_Chat_descriptor_ = file->message_type(44);
  static const int GS2C_Chat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat, errorcode_),
  };
  GS2C_Chat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Chat_descriptor_,
      GS2C_Chat::default_instance_,
      GS2C_Chat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Chat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Chat));
  C2GS_ChatBroadcast_descriptor_ = file->message_type(45);
  static const int C2GS_ChatBroadcast_offsets_[1] = {
  };
  C2GS_ChatBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ChatBroadcast_descriptor_,
      C2GS_ChatBroadcast::default_instance_,
      C2GS_ChatBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ChatBroadcast));
  GS2C_ChatBroadcast_descriptor_ = file->message_type(46);
  static const int GS2C_ChatBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatBroadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatBroadcast, chat_index_),
  };
  GS2C_ChatBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ChatBroadcast_descriptor_,
      GS2C_ChatBroadcast::default_instance_,
      GS2C_ChatBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ChatBroadcast));
  ResultItem_descriptor_ = file->message_type(47);
  static const int ResultItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, hand_cards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, weaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, gold_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, gold_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, hua_num_),
  };
  ResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultItem_descriptor_,
      ResultItem::default_instance_,
      ResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultItem));
  C2GS_RoundResultBroadcast_descriptor_ = file->message_type(48);
  static const int C2GS_RoundResultBroadcast_offsets_[1] = {
  };
  C2GS_RoundResultBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_RoundResultBroadcast_descriptor_,
      C2GS_RoundResultBroadcast::default_instance_,
      C2GS_RoundResultBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_RoundResultBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_RoundResultBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_RoundResultBroadcast));
  GS2C_RoundResultBroadcast_descriptor_ = file->message_type(49);
  static const int GS2C_RoundResultBroadcast_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, result_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, win_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, provide_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, win_fan_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, fan_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, is_minglou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, is_zimo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, rule_),
  };
  GS2C_RoundResultBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_RoundResultBroadcast_descriptor_,
      GS2C_RoundResultBroadcast::default_instance_,
      GS2C_RoundResultBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_RoundResultBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_RoundResultBroadcast));
  HistoryItem_descriptor_ = file->message_type(50);
  static const int HistoryItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, action_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, action_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, provider_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, action_cards_),
  };
  HistoryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryItem_descriptor_,
      HistoryItem::default_instance_,
      HistoryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryItem));
  C2GS_HistoryBroadcast_descriptor_ = file->message_type(51);
  static const int C2GS_HistoryBroadcast_offsets_[1] = {
  };
  C2GS_HistoryBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_HistoryBroadcast_descriptor_,
      C2GS_HistoryBroadcast::default_instance_,
      C2GS_HistoryBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_HistoryBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_HistoryBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_HistoryBroadcast));
  GS2C_HistoryBroadcast_descriptor_ = file->message_type(52);
  static const int GS2C_HistoryBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HistoryBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HistoryBroadcast, history_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HistoryBroadcast, history_list_),
  };
  GS2C_HistoryBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_HistoryBroadcast_descriptor_,
      GS2C_HistoryBroadcast::default_instance_,
      GS2C_HistoryBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HistoryBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_HistoryBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_HistoryBroadcast));
  C2GS_DismissAskBroadcast_descriptor_ = file->message_type(53);
  static const int C2GS_DismissAskBroadcast_offsets_[1] = {
  };
  C2GS_DismissAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_DismissAskBroadcast_descriptor_,
      C2GS_DismissAskBroadcast::default_instance_,
      C2GS_DismissAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_DismissAskBroadcast));
  GS2C_DismissAskBroadcast_descriptor_ = file->message_type(54);
  static const int GS2C_DismissAskBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAskBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAskBroadcast, ask_uid_),
  };
  GS2C_DismissAskBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DismissAskBroadcast_descriptor_,
      GS2C_DismissAskBroadcast::default_instance_,
      GS2C_DismissAskBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAskBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAskBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DismissAskBroadcast));
  C2GS_DismissAnswer_descriptor_ = file->message_type(55);
  static const int C2GS_DismissAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAnswer, is_agree_),
  };
  C2GS_DismissAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_DismissAnswer_descriptor_,
      C2GS_DismissAnswer::default_instance_,
      C2GS_DismissAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_DismissAnswer));
  GS2C_DismissAnswer_descriptor_ = file->message_type(56);
  static const int GS2C_DismissAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswer, errorcode_),
  };
  GS2C_DismissAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DismissAnswer_descriptor_,
      GS2C_DismissAnswer::default_instance_,
      GS2C_DismissAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DismissAnswer));
  C2GS_DismissAnswerBroadcast_descriptor_ = file->message_type(57);
  static const int C2GS_DismissAnswerBroadcast_offsets_[1] = {
  };
  C2GS_DismissAnswerBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_DismissAnswerBroadcast_descriptor_,
      C2GS_DismissAnswerBroadcast::default_instance_,
      C2GS_DismissAnswerBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAnswerBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissAnswerBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_DismissAnswerBroadcast));
  GS2C_DismissAnswerBroadcast_descriptor_ = file->message_type(58);
  static const int GS2C_DismissAnswerBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswerBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswerBroadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswerBroadcast, is_agree_),
  };
  GS2C_DismissAnswerBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DismissAnswerBroadcast_descriptor_,
      GS2C_DismissAnswerBroadcast::default_instance_,
      GS2C_DismissAnswerBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswerBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissAnswerBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DismissAnswerBroadcast));
  C2GS_DismissBroadcast_descriptor_ = file->message_type(59);
  static const int C2GS_DismissBroadcast_offsets_[1] = {
  };
  C2GS_DismissBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_DismissBroadcast_descriptor_,
      C2GS_DismissBroadcast::default_instance_,
      C2GS_DismissBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_DismissBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_DismissBroadcast));
  GS2C_DismissBroadcast_descriptor_ = file->message_type(60);
  static const int GS2C_DismissBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissBroadcast, is_dismiss_),
  };
  GS2C_DismissBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_DismissBroadcast_descriptor_,
      GS2C_DismissBroadcast::default_instance_,
      GS2C_DismissBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_DismissBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_DismissBroadcast));
  C2GS_VoiceTalk_descriptor_ = file->message_type(61);
  static const int C2GS_VoiceTalk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_VoiceTalk, voice_data_),
  };
  C2GS_VoiceTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_VoiceTalk_descriptor_,
      C2GS_VoiceTalk::default_instance_,
      C2GS_VoiceTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_VoiceTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_VoiceTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_VoiceTalk));
  GS2C_VoiceTalk_descriptor_ = file->message_type(62);
  static const int GS2C_VoiceTalk_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalk, errorcode_),
  };
  GS2C_VoiceTalk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_VoiceTalk_descriptor_,
      GS2C_VoiceTalk::default_instance_,
      GS2C_VoiceTalk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_VoiceTalk));
  C2GS_VoiceTalkBroadcast_descriptor_ = file->message_type(63);
  static const int C2GS_VoiceTalkBroadcast_offsets_[1] = {
  };
  C2GS_VoiceTalkBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_VoiceTalkBroadcast_descriptor_,
      C2GS_VoiceTalkBroadcast::default_instance_,
      C2GS_VoiceTalkBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_VoiceTalkBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_VoiceTalkBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_VoiceTalkBroadcast));
  GS2C_VoiceTalkBroadcast_descriptor_ = file->message_type(64);
  static const int GS2C_VoiceTalkBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalkBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalkBroadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalkBroadcast, voice_data_),
  };
  GS2C_VoiceTalkBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_VoiceTalkBroadcast_descriptor_,
      GS2C_VoiceTalkBroadcast::default_instance_,
      GS2C_VoiceTalkBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalkBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_VoiceTalkBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_VoiceTalkBroadcast));
  C2GS_ChatCustom_descriptor_ = file->message_type(65);
  static const int C2GS_ChatCustom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatCustom, chat_content_),
  };
  C2GS_ChatCustom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ChatCustom_descriptor_,
      C2GS_ChatCustom::default_instance_,
      C2GS_ChatCustom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatCustom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatCustom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ChatCustom));
  GS2C_ChatCustom_descriptor_ = file->message_type(66);
  static const int GS2C_ChatCustom_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustom, errorcode_),
  };
  GS2C_ChatCustom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ChatCustom_descriptor_,
      GS2C_ChatCustom::default_instance_,
      GS2C_ChatCustom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ChatCustom));
  C2GS_ChatCustomBroadcast_descriptor_ = file->message_type(67);
  static const int C2GS_ChatCustomBroadcast_offsets_[1] = {
  };
  C2GS_ChatCustomBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ChatCustomBroadcast_descriptor_,
      C2GS_ChatCustomBroadcast::default_instance_,
      C2GS_ChatCustomBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatCustomBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ChatCustomBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ChatCustomBroadcast));
  GS2C_ChatCustomBroadcast_descriptor_ = file->message_type(68);
  static const int GS2C_ChatCustomBroadcast_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustomBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustomBroadcast, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustomBroadcast, chat_content_),
  };
  GS2C_ChatCustomBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ChatCustomBroadcast_descriptor_,
      GS2C_ChatCustomBroadcast::default_instance_,
      GS2C_ChatCustomBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustomBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ChatCustomBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ChatCustomBroadcast));
  C2GS_Ready_descriptor_ = file->message_type(69);
  static const int C2GS_Ready_offsets_[1] = {
  };
  C2GS_Ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_Ready_descriptor_,
      C2GS_Ready::default_instance_,
      C2GS_Ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_Ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_Ready));
  GS2C_Ready_descriptor_ = file->message_type(70);
  static const int GS2C_Ready_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Ready, errorcode_),
  };
  GS2C_Ready_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_Ready_descriptor_,
      GS2C_Ready::default_instance_,
      GS2C_Ready_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Ready, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_Ready, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_Ready));
  C2GS_ReadyBroadcast_descriptor_ = file->message_type(71);
  static const int C2GS_ReadyBroadcast_offsets_[1] = {
  };
  C2GS_ReadyBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_ReadyBroadcast_descriptor_,
      C2GS_ReadyBroadcast::default_instance_,
      C2GS_ReadyBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ReadyBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_ReadyBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_ReadyBroadcast));
  GS2C_ReadyBroadcast_descriptor_ = file->message_type(72);
  static const int GS2C_ReadyBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ReadyBroadcast, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ReadyBroadcast, uid_),
  };
  GS2C_ReadyBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_ReadyBroadcast_descriptor_,
      GS2C_ReadyBroadcast::default_instance_,
      GS2C_ReadyBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ReadyBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_ReadyBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_ReadyBroadcast));
  C2GS_GetJuCnt_descriptor_ = file->message_type(73);
  static const int C2GS_GetJuCnt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetJuCnt, uid_),
  };
  C2GS_GetJuCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2GS_GetJuCnt_descriptor_,
      C2GS_GetJuCnt::default_instance_,
      C2GS_GetJuCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetJuCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2GS_GetJuCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2GS_GetJuCnt));
  GS2C_GetJuCnt_descriptor_ = file->message_type(74);
  static const int GS2C_GetJuCnt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, ju_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, ju_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, ju_lose_),
  };
  GS2C_GetJuCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2C_GetJuCnt_descriptor_,
      GS2C_GetJuCnt::default_instance_,
      GS2C_GetJuCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2C_GetJuCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2C_GetJuCnt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_command_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_PingPong_descriptor_, &C2GS_PingPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PingPong_descriptor_, &GS2C_PingPong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_PingPongAskBroadcast_descriptor_, &C2GS_PingPongAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_PingPongAskBroadcast_descriptor_, &GS2C_PingPongAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Login_descriptor_, &C2GS_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Login_descriptor_, &GS2C_Login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_JoinTable_descriptor_, &C2GS_JoinTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsrInfo_descriptor_, &UsrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaveItem_descriptor_, &WeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectItem_descriptor_, &ReconnectItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_JoinTable_descriptor_, &GS2C_JoinTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_JoinTableBroadcast_descriptor_, &C2GS_JoinTableBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_JoinTableBroadcast_descriptor_, &GS2C_JoinTableBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_BreakBackBroadcast_descriptor_, &C2GS_BreakBackBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_BreakBackBroadcast_descriptor_, &GS2C_BreakBackBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_LeaveTable_descriptor_, &C2GS_LeaveTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LeaveTable_descriptor_, &GS2C_LeaveTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_LeaveTableBroadcast_descriptor_, &C2GS_LeaveTableBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_LeaveTableBroadcast_descriptor_, &GS2C_LeaveTableBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_BreakBroadcast_descriptor_, &C2GS_BreakBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_BreakBroadcast_descriptor_, &GS2C_BreakBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_StartReplaceBroadcast_descriptor_, &C2GS_StartReplaceBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_StartReplaceBroadcast_descriptor_, &GS2C_StartReplaceBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_RoundStartBroadcast_descriptor_, &C2GS_RoundStartBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_RoundStartBroadcast_descriptor_, &GS2C_RoundStartBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_DispatchBroadcast_descriptor_, &C2GS_DispatchBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DispatchBroadcast_descriptor_, &GS2C_DispatchBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Out_descriptor_, &C2GS_Out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Out_descriptor_, &GS2C_Out::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_OutBroadcast_descriptor_, &C2GS_OutBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_OutBroadcast_descriptor_, &GS2C_OutBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_OperateAskBroadcast_descriptor_, &C2GS_OperateAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_OperateAskBroadcast_descriptor_, &GS2C_OperateAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Operate_descriptor_, &C2GS_Operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Operate_descriptor_, &GS2C_Operate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_OperateResultBroadcast_descriptor_, &C2GS_OperateResultBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_OperateResultBroadcast_descriptor_, &GS2C_OperateResultBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_MinglouAsk_descriptor_, &C2GS_MinglouAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MinglouAsk_descriptor_, &GS2C_MinglouAsk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Minglou_descriptor_, &C2GS_Minglou::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Minglou_descriptor_, &GS2C_Minglou::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_MinglouBroadcast_descriptor_, &C2GS_MinglouBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_MinglouBroadcast_descriptor_, &GS2C_MinglouBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Chat_descriptor_, &C2GS_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Chat_descriptor_, &GS2C_Chat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ChatBroadcast_descriptor_, &C2GS_ChatBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ChatBroadcast_descriptor_, &GS2C_ChatBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultItem_descriptor_, &ResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_RoundResultBroadcast_descriptor_, &C2GS_RoundResultBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_RoundResultBroadcast_descriptor_, &GS2C_RoundResultBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryItem_descriptor_, &HistoryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_HistoryBroadcast_descriptor_, &C2GS_HistoryBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_HistoryBroadcast_descriptor_, &GS2C_HistoryBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_DismissAskBroadcast_descriptor_, &C2GS_DismissAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DismissAskBroadcast_descriptor_, &GS2C_DismissAskBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_DismissAnswer_descriptor_, &C2GS_DismissAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DismissAnswer_descriptor_, &GS2C_DismissAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_DismissAnswerBroadcast_descriptor_, &C2GS_DismissAnswerBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DismissAnswerBroadcast_descriptor_, &GS2C_DismissAnswerBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_DismissBroadcast_descriptor_, &C2GS_DismissBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_DismissBroadcast_descriptor_, &GS2C_DismissBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_VoiceTalk_descriptor_, &C2GS_VoiceTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_VoiceTalk_descriptor_, &GS2C_VoiceTalk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_VoiceTalkBroadcast_descriptor_, &C2GS_VoiceTalkBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_VoiceTalkBroadcast_descriptor_, &GS2C_VoiceTalkBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ChatCustom_descriptor_, &C2GS_ChatCustom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ChatCustom_descriptor_, &GS2C_ChatCustom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ChatCustomBroadcast_descriptor_, &C2GS_ChatCustomBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ChatCustomBroadcast_descriptor_, &GS2C_ChatCustomBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_Ready_descriptor_, &C2GS_Ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_Ready_descriptor_, &GS2C_Ready::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_ReadyBroadcast_descriptor_, &C2GS_ReadyBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_ReadyBroadcast_descriptor_, &GS2C_ReadyBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2GS_GetJuCnt_descriptor_, &C2GS_GetJuCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2C_GetJuCnt_descriptor_, &GS2C_GetJuCnt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_command_2eproto() {
  delete C2GS_PingPong::default_instance_;
  delete C2GS_PingPong_reflection_;
  delete GS2C_PingPong::default_instance_;
  delete GS2C_PingPong_reflection_;
  delete C2GS_PingPongAskBroadcast::default_instance_;
  delete C2GS_PingPongAskBroadcast_reflection_;
  delete GS2C_PingPongAskBroadcast::default_instance_;
  delete GS2C_PingPongAskBroadcast_reflection_;
  delete C2GS_Login::default_instance_;
  delete C2GS_Login_reflection_;
  delete GS2C_Login::default_instance_;
  delete GS2C_Login_reflection_;
  delete C2GS_JoinTable::default_instance_;
  delete C2GS_JoinTable_reflection_;
  delete UsrInfo::default_instance_;
  delete UsrInfo_reflection_;
  delete WeaveItem::default_instance_;
  delete WeaveItem_reflection_;
  delete ReconnectItem::default_instance_;
  delete ReconnectItem_reflection_;
  delete GS2C_JoinTable::default_instance_;
  delete GS2C_JoinTable_reflection_;
  delete C2GS_JoinTableBroadcast::default_instance_;
  delete C2GS_JoinTableBroadcast_reflection_;
  delete GS2C_JoinTableBroadcast::default_instance_;
  delete GS2C_JoinTableBroadcast_reflection_;
  delete C2GS_BreakBackBroadcast::default_instance_;
  delete C2GS_BreakBackBroadcast_reflection_;
  delete GS2C_BreakBackBroadcast::default_instance_;
  delete GS2C_BreakBackBroadcast_reflection_;
  delete C2GS_LeaveTable::default_instance_;
  delete C2GS_LeaveTable_reflection_;
  delete GS2C_LeaveTable::default_instance_;
  delete GS2C_LeaveTable_reflection_;
  delete C2GS_LeaveTableBroadcast::default_instance_;
  delete C2GS_LeaveTableBroadcast_reflection_;
  delete GS2C_LeaveTableBroadcast::default_instance_;
  delete GS2C_LeaveTableBroadcast_reflection_;
  delete C2GS_BreakBroadcast::default_instance_;
  delete C2GS_BreakBroadcast_reflection_;
  delete GS2C_BreakBroadcast::default_instance_;
  delete GS2C_BreakBroadcast_reflection_;
  delete C2GS_StartReplaceBroadcast::default_instance_;
  delete C2GS_StartReplaceBroadcast_reflection_;
  delete GS2C_StartReplaceBroadcast::default_instance_;
  delete GS2C_StartReplaceBroadcast_reflection_;
  delete C2GS_RoundStartBroadcast::default_instance_;
  delete C2GS_RoundStartBroadcast_reflection_;
  delete GS2C_RoundStartBroadcast::default_instance_;
  delete GS2C_RoundStartBroadcast_reflection_;
  delete C2GS_DispatchBroadcast::default_instance_;
  delete C2GS_DispatchBroadcast_reflection_;
  delete GS2C_DispatchBroadcast::default_instance_;
  delete GS2C_DispatchBroadcast_reflection_;
  delete C2GS_Out::default_instance_;
  delete C2GS_Out_reflection_;
  delete GS2C_Out::default_instance_;
  delete GS2C_Out_reflection_;
  delete C2GS_OutBroadcast::default_instance_;
  delete C2GS_OutBroadcast_reflection_;
  delete GS2C_OutBroadcast::default_instance_;
  delete GS2C_OutBroadcast_reflection_;
  delete C2GS_OperateAskBroadcast::default_instance_;
  delete C2GS_OperateAskBroadcast_reflection_;
  delete GS2C_OperateAskBroadcast::default_instance_;
  delete GS2C_OperateAskBroadcast_reflection_;
  delete C2GS_Operate::default_instance_;
  delete C2GS_Operate_reflection_;
  delete GS2C_Operate::default_instance_;
  delete GS2C_Operate_reflection_;
  delete C2GS_OperateResultBroadcast::default_instance_;
  delete C2GS_OperateResultBroadcast_reflection_;
  delete GS2C_OperateResultBroadcast::default_instance_;
  delete GS2C_OperateResultBroadcast_reflection_;
  delete C2GS_MinglouAsk::default_instance_;
  delete C2GS_MinglouAsk_reflection_;
  delete GS2C_MinglouAsk::default_instance_;
  delete GS2C_MinglouAsk_reflection_;
  delete C2GS_Minglou::default_instance_;
  delete C2GS_Minglou_reflection_;
  delete GS2C_Minglou::default_instance_;
  delete GS2C_Minglou_reflection_;
  delete C2GS_MinglouBroadcast::default_instance_;
  delete C2GS_MinglouBroadcast_reflection_;
  delete GS2C_MinglouBroadcast::default_instance_;
  delete GS2C_MinglouBroadcast_reflection_;
  delete C2GS_Chat::default_instance_;
  delete C2GS_Chat_reflection_;
  delete GS2C_Chat::default_instance_;
  delete GS2C_Chat_reflection_;
  delete C2GS_ChatBroadcast::default_instance_;
  delete C2GS_ChatBroadcast_reflection_;
  delete GS2C_ChatBroadcast::default_instance_;
  delete GS2C_ChatBroadcast_reflection_;
  delete ResultItem::default_instance_;
  delete ResultItem_reflection_;
  delete C2GS_RoundResultBroadcast::default_instance_;
  delete C2GS_RoundResultBroadcast_reflection_;
  delete GS2C_RoundResultBroadcast::default_instance_;
  delete GS2C_RoundResultBroadcast_reflection_;
  delete HistoryItem::default_instance_;
  delete HistoryItem_reflection_;
  delete C2GS_HistoryBroadcast::default_instance_;
  delete C2GS_HistoryBroadcast_reflection_;
  delete GS2C_HistoryBroadcast::default_instance_;
  delete GS2C_HistoryBroadcast_reflection_;
  delete C2GS_DismissAskBroadcast::default_instance_;
  delete C2GS_DismissAskBroadcast_reflection_;
  delete GS2C_DismissAskBroadcast::default_instance_;
  delete GS2C_DismissAskBroadcast_reflection_;
  delete C2GS_DismissAnswer::default_instance_;
  delete C2GS_DismissAnswer_reflection_;
  delete GS2C_DismissAnswer::default_instance_;
  delete GS2C_DismissAnswer_reflection_;
  delete C2GS_DismissAnswerBroadcast::default_instance_;
  delete C2GS_DismissAnswerBroadcast_reflection_;
  delete GS2C_DismissAnswerBroadcast::default_instance_;
  delete GS2C_DismissAnswerBroadcast_reflection_;
  delete C2GS_DismissBroadcast::default_instance_;
  delete C2GS_DismissBroadcast_reflection_;
  delete GS2C_DismissBroadcast::default_instance_;
  delete GS2C_DismissBroadcast_reflection_;
  delete C2GS_VoiceTalk::default_instance_;
  delete C2GS_VoiceTalk_reflection_;
  delete GS2C_VoiceTalk::default_instance_;
  delete GS2C_VoiceTalk_reflection_;
  delete C2GS_VoiceTalkBroadcast::default_instance_;
  delete C2GS_VoiceTalkBroadcast_reflection_;
  delete GS2C_VoiceTalkBroadcast::default_instance_;
  delete GS2C_VoiceTalkBroadcast_reflection_;
  delete C2GS_ChatCustom::default_instance_;
  delete C2GS_ChatCustom_reflection_;
  delete GS2C_ChatCustom::default_instance_;
  delete GS2C_ChatCustom_reflection_;
  delete C2GS_ChatCustomBroadcast::default_instance_;
  delete C2GS_ChatCustomBroadcast_reflection_;
  delete GS2C_ChatCustomBroadcast::default_instance_;
  delete GS2C_ChatCustomBroadcast_reflection_;
  delete C2GS_Ready::default_instance_;
  delete C2GS_Ready_reflection_;
  delete GS2C_Ready::default_instance_;
  delete GS2C_Ready_reflection_;
  delete C2GS_ReadyBroadcast::default_instance_;
  delete C2GS_ReadyBroadcast_reflection_;
  delete GS2C_ReadyBroadcast::default_instance_;
  delete GS2C_ReadyBroadcast_reflection_;
  delete C2GS_GetJuCnt::default_instance_;
  delete C2GS_GetJuCnt_reflection_;
  delete GS2C_GetJuCnt::default_instance_;
  delete GS2C_GetJuCnt_reflection_;
}

void protobuf_AddDesc_command_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcommand.proto\022\002pb\"\034\n\rC2GS_PingPong\022\013\n\003"
    "uid\030\001 \002(\003\"%\n\rGS2C_PingPong\022\024\n\terrorcode\030"
    "\001 \002(\005:\0010\"\033\n\031C2GS_PingPongAskBroadcast\"1\n"
    "\031GS2C_PingPongAskBroadcast\022\024\n\terrorcode\030"
    "\001 \002(\005:\0010\"+\n\nC2GS_Login\022\013\n\003uid\030\001 \002(\003\022\020\n\010t"
    "able_id\030\002 \002(\005\"3\n\nGS2C_Login\022\021\n\terrorcode"
    "\030\001 \002(\005\022\022\n\nsession_id\030\002 \001(\t\"3\n\016C2GS_JoinT"
    "able\022\020\n\010table_id\030\001 \002(\005\022\017\n\007seat_id\030\002 \002(\005\""
    "\243\001\n\007UsrInfo\022\013\n\003uid\030\001 \002(\003\022\024\n\014weichat_nick"
    "\030\002 \002(\t\022\034\n\024weichat_face_address\030\003 \002(\t\022\020\n\010"
    "big_gold\030\004 \002(\003\022\014\n\004gold\030\005 \002(\003\022\013\n\003sex\030\006 \002("
    "\005\022\n\n\002ip\030\007 \002(\t\022\016\n\006status\030\010 \002(\005\022\016\n\006seatid\030"
    "\t \002(\005\"A\n\tWeaveItem\022\022\n\nweave_kind\030\001 \002(\003\022\r"
    "\n\005cards\030\002 \003(\005\022\021\n\tis_angang\030\003 \001(\005\"\366\003\n\rRec"
    "onnectItem\022\022\n\nhand_cards\030\001 \003(\005\022\021\n\thand_c"
    "nts\030\002 \003(\005\022\036\n\007weaves1\030\003 \003(\0132\r.pb.WeaveIte"
    "m\022\036\n\007weaves2\030\004 \003(\0132\r.pb.WeaveItem\022\036\n\007wea"
    "ves3\030\005 \003(\0132\r.pb.WeaveItem\022\036\n\007weaves4\030\006 \003"
    "(\0132\r.pb.WeaveItem\022\027\n\017dismiss_cards_1\030\007 \003"
    "(\005\022\027\n\017dismiss_cards_2\030\010 \003(\005\022\027\n\017dismiss_c"
    "ards_3\030\t \003(\005\022\027\n\017dismiss_cards_4\030\n \003(\005\022\027\n"
    "\017minglou_cards_1\030\013 \003(\005\022\027\n\017minglou_cards_"
    "2\030\014 \003(\005\022\027\n\017minglou_cards_3\030\r \003(\005\022\027\n\017ming"
    "lou_cards_4\030\016 \003(\005\022\023\n\013current_uid\030\017 \001(\005\022\025"
    "\n\rleft_card_cnt\030\020 \001(\005\022\022\n\nleft_round\030\021 \001("
    "\005\022\023\n\013is_minglous\030\022 \003(\005\022\020\n\010hua_cnts\030\023 \003(\005"
    "\022\017\n\007actions\030\024 \003(\005\"\204\001\n\016GS2C_JoinTable\022\024\n\t"
    "errorcode\030\001 \002(\005:\0010\022\"\n\rusr_info_list\030\002 \003("
    "\0132\013.pb.UsrInfo\022$\n\treconnect\030\003 \001(\0132\021.pb.R"
    "econnectItem\022\022\n\nbanker_uid\030\004 \001(\005\"\031\n\027C2GS"
    "_JoinTableBroadcast\"b\n\027GS2C_JoinTableBro"
    "adcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\035\n\010usr_info"
    "\030\002 \002(\0132\013.pb.UsrInfo\022\022\n\nbanker_uid\030\003 \001(\005\""
    "\031\n\027C2GS_BreakBackBroadcast\"B\n\027GS2C_Break"
    "BackBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\021\n\tb"
    "reak_uid\030\002 \002(\005\"\'\n\017C2GS_LeaveTable\022\024\n\014lea"
    "ve_reason\030\001 \001(\005\"[\n\017GS2C_LeaveTable\022\024\n\ter"
    "rorcode\030\001 \002(\005:\0010\022\024\n\014leave_reason\030\002 \001(\005\022\034"
    "\n\024is_banker_no_dismiss\030\003 \001(\005\"\032\n\030C2GS_Lea"
    "veTableBroadcast\"q\n\030GS2C_LeaveTableBroad"
    "cast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\013\n\003uid\030\002 \002(\003\022"
    "\024\n\014leave_reason\030\003 \001(\005\022\034\n\024is_banker_no_di"
    "smiss\030\004 \001(\005\"\025\n\023C2GS_BreakBroadcast\"8\n\023GS"
    "2C_BreakBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022"
    "\013\n\003uid\030\002 \002(\003\"\034\n\032C2GS_StartReplaceBroadca"
    "st\"`\n\032GS2C_StartReplaceBroadcast\022\024\n\terro"
    "rcode\030\001 \002(\005:\0010\022\024\n\014replace_uids\030\002 \003(\005\022\026\n\016"
    "card_cnt_reals\030\003 \003(\005\"\032\n\030C2GS_RoundStartB"
    "roadcast\"\220\001\n\030GS2C_RoundStartBroadcast\022\024\n"
    "\terrorcode\030\001 \002(\005:\0010\022\022\n\nleft_round\030\002 \001(\005\022"
    "\020\n\010left_cnt\030\003 \001(\005\022\020\n\010gold_now\030\004 \001(\005\022\022\n\nb"
    "anker_uid\030\005 \001(\005\022\022\n\nhand_cards\030\006 \003(\005\"\030\n\026C"
    "2GS_DispatchBroadcast\"\204\001\n\026GS2C_DispatchB"
    "roadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\014\n\004card\030\002"
    " \001(\005\022\024\n\014dispatch_uid\030\004 \001(\005\022\020\n\010left_cnt\030\005"
    " \001(\005\022\r\n\005is_hu\030\006 \001(\005\022\017\n\007is_gang\030\007 \001(\005\"\030\n\010"
    "C2GS_Out\022\014\n\004card\030\001 \002(\005\" \n\010GS2C_Out\022\024\n\ter"
    "rorcode\030\001 \002(\005:\0010\"\023\n\021C2GS_OutBroadcast\"H\n"
    "\021GS2C_OutBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010"
    "\022\017\n\007out_uid\030\002 \001(\005\022\014\n\004card\030\003 \001(\005\"\032\n\030C2GS_"
    "OperateAskBroadcast\"~\n\030GS2C_OperateAskBr"
    "oadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\022\n\nresume_"
    "uid\030\002 \001(\005\022\023\n\013action_card\030\003 \001(\005\022\017\n\007action"
    "s\030\004 \003(\005\022\022\n\ngang_cards\030\005 \003(\005\";\n\014C2GS_Oper"
    "ate\022\024\n\014operate_code\030\001 \002(\005\022\025\n\roperate_car"
    "ds\030\002 \003(\005\":\n\014GS2C_Operate\022\024\n\terrorcode\030\001 "
    "\002(\005:\0010\022\024\n\014operate_code\030\002 \001(\005\"\035\n\033C2GS_Ope"
    "rateResultBroadcast\"\235\001\n\033GS2C_OperateResu"
    "ltBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\023\n\013ope"
    "rate_uid\030\002 \001(\005\022\023\n\013provide_uid\030\003 \001(\005\022\024\n\014o"
    "perate_code\030\004 \001(\005\022\025\n\roperate_cards\030\005 \003(\005"
    "\022\021\n\tis_angang\030\006 \001(\005\"\021\n\017C2GS_MinglouAsk\"B"
    "\n\017GS2C_MinglouAsk\022\024\n\terrorcode\030\001 \002(\005:\0010\022"
    "\031\n\021can_discard_cards\030\002 \003(\005\"\016\n\014C2GS_Mingl"
    "ou\"$\n\014GS2C_Minglou\022\024\n\terrorcode\030\001 \002(\005:\0010"
    "\"\027\n\025C2GS_MinglouBroadcast\"Y\n\025GS2C_Minglo"
    "uBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\023\n\013ming"
    "lou_uid\030\002 \001(\005\022\025\n\rminglou_cards\030\003 \003(\005\"\037\n\t"
    "C2GS_Chat\022\022\n\nchat_index\030\001 \001(\005\"!\n\tGS2C_Ch"
    "at\022\024\n\terrorcode\030\001 \002(\005:\0010\"\024\n\022C2GS_ChatBro"
    "adcast\"K\n\022GS2C_ChatBroadcast\022\024\n\terrorcod"
    "e\030\001 \002(\005:\0010\022\013\n\003uid\030\002 \002(\005\022\022\n\nchat_index\030\003 "
    "\002(\005\"\206\001\n\nResultItem\022\013\n\003uid\030\001 \002(\003\022\022\n\nhand_"
    "cards\030\002 \003(\005\022\035\n\006weaves\030\003 \003(\0132\r.pb.WeaveIt"
    "em\022\023\n\013gold_change\030\004 \001(\005\022\022\n\ngold_total\030\005 "
    "\001(\005\022\017\n\007hua_num\030\006 \001(\005\"\033\n\031C2GS_RoundResult"
    "Broadcast\"\331\001\n\031GS2C_RoundResultBroadcast\022"
    "\024\n\terrorcode\030\001 \002(\005:\0010\022#\n\013result_list\030\002 \003"
    "(\0132\016.pb.ResultItem\022\017\n\007win_uid\030\003 \001(\005\022\023\n\013p"
    "rovide_uid\030\004 \001(\005\022\023\n\013win_fan_cnt\030\005 \001(\005\022\023\n"
    "\013fan_details\030\006 \001(\t\022\022\n\nis_minglou\030\007 \001(\005\022\017"
    "\n\007is_zimo\030\010 \001(\005\022\014\n\004rule\030\t \001(\t\"b\n\013History"
    "Item\022\023\n\013action_type\030\001 \002(\003\022\022\n\naction_uid\030"
    "\002 \001(\005\022\024\n\014provider_uid\030\003 \001(\005\022\024\n\014action_ca"
    "rds\030\004 \003(\005\"\027\n\025C2GS_HistoryBroadcast\"j\n\025GS"
    "2C_HistoryBroadcast\022\024\n\terrorcode\030\001 \002(\005:\001"
    "0\022\024\n\014history_name\030\002 \001(\t\022%\n\014history_list\030"
    "\003 \003(\0132\017.pb.HistoryItem\"\032\n\030C2GS_DismissAs"
    "kBroadcast\"A\n\030GS2C_DismissAskBroadcast\022\024"
    "\n\terrorcode\030\001 \002(\005:\0010\022\017\n\007ask_uid\030\002 \001(\005\"&\n"
    "\022C2GS_DismissAnswer\022\020\n\010is_agree\030\001 \001(\005\"*\n"
    "\022GS2C_DismissAnswer\022\024\n\terrorcode\030\001 \002(\005:\001"
    "0\"\035\n\033C2GS_DismissAnswerBroadcast\"R\n\033GS2C"
    "_DismissAnswerBroadcast\022\024\n\terrorcode\030\001 \002"
    "(\005:\0010\022\013\n\003uid\030\002 \002(\003\022\020\n\010is_agree\030\003 \001(\005\"\027\n\025"
    "C2GS_DismissBroadcast\"A\n\025GS2C_DismissBro"
    "adcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\022\n\nis_dismi"
    "ss\030\002 \001(\005\"$\n\016C2GS_VoiceTalk\022\022\n\nvoice_data"
    "\030\001 \002(\014\"&\n\016GS2C_VoiceTalk\022\024\n\terrorcode\030\001 "
    "\002(\005:\0010\"\031\n\027C2GS_VoiceTalkBroadcast\"P\n\027GS2"
    "C_VoiceTalkBroadcast\022\024\n\terrorcode\030\001 \002(\005:"
    "\0010\022\013\n\003uid\030\002 \002(\003\022\022\n\nvoice_data\030\003 \002(\014\"\'\n\017C"
    "2GS_ChatCustom\022\024\n\014chat_content\030\001 \002(\t\"\'\n\017"
    "GS2C_ChatCustom\022\024\n\terrorcode\030\001 \002(\005:\0010\"\032\n"
    "\030C2GS_ChatCustomBroadcast\"S\n\030GS2C_ChatCu"
    "stomBroadcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\013\n\003u"
    "id\030\002 \002(\005\022\024\n\014chat_content\030\003 \002(\t\"\014\n\nC2GS_R"
    "eady\"\"\n\nGS2C_Ready\022\024\n\terrorcode\030\001 \002(\005:\0010"
    "\"\025\n\023C2GS_ReadyBroadcast\"8\n\023GS2C_ReadyBro"
    "adcast\022\024\n\terrorcode\030\001 \002(\005:\0010\022\013\n\003uid\030\002 \002("
    "\003\"\034\n\rC2GS_GetJuCnt\022\013\n\003uid\030\002 \002(\003\"d\n\rGS2C_"
    "GetJuCnt\022\024\n\terrorcode\030\001 \002(\005:\0010\022\013\n\003uid\030\002 "
    "\002(\003\022\016\n\006ju_win\030\003 \001(\005\022\017\n\007ju_draw\030\004 \001(\005\022\017\n\007"
    "ju_lose\030\005 \001(\005", 4933);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "command.proto", &protobuf_RegisterTypes);
  C2GS_PingPong::default_instance_ = new C2GS_PingPong();
  GS2C_PingPong::default_instance_ = new GS2C_PingPong();
  C2GS_PingPongAskBroadcast::default_instance_ = new C2GS_PingPongAskBroadcast();
  GS2C_PingPongAskBroadcast::default_instance_ = new GS2C_PingPongAskBroadcast();
  C2GS_Login::default_instance_ = new C2GS_Login();
  GS2C_Login::default_instance_ = new GS2C_Login();
  C2GS_JoinTable::default_instance_ = new C2GS_JoinTable();
  UsrInfo::default_instance_ = new UsrInfo();
  WeaveItem::default_instance_ = new WeaveItem();
  ReconnectItem::default_instance_ = new ReconnectItem();
  GS2C_JoinTable::default_instance_ = new GS2C_JoinTable();
  C2GS_JoinTableBroadcast::default_instance_ = new C2GS_JoinTableBroadcast();
  GS2C_JoinTableBroadcast::default_instance_ = new GS2C_JoinTableBroadcast();
  C2GS_BreakBackBroadcast::default_instance_ = new C2GS_BreakBackBroadcast();
  GS2C_BreakBackBroadcast::default_instance_ = new GS2C_BreakBackBroadcast();
  C2GS_LeaveTable::default_instance_ = new C2GS_LeaveTable();
  GS2C_LeaveTable::default_instance_ = new GS2C_LeaveTable();
  C2GS_LeaveTableBroadcast::default_instance_ = new C2GS_LeaveTableBroadcast();
  GS2C_LeaveTableBroadcast::default_instance_ = new GS2C_LeaveTableBroadcast();
  C2GS_BreakBroadcast::default_instance_ = new C2GS_BreakBroadcast();
  GS2C_BreakBroadcast::default_instance_ = new GS2C_BreakBroadcast();
  C2GS_StartReplaceBroadcast::default_instance_ = new C2GS_StartReplaceBroadcast();
  GS2C_StartReplaceBroadcast::default_instance_ = new GS2C_StartReplaceBroadcast();
  C2GS_RoundStartBroadcast::default_instance_ = new C2GS_RoundStartBroadcast();
  GS2C_RoundStartBroadcast::default_instance_ = new GS2C_RoundStartBroadcast();
  C2GS_DispatchBroadcast::default_instance_ = new C2GS_DispatchBroadcast();
  GS2C_DispatchBroadcast::default_instance_ = new GS2C_DispatchBroadcast();
  C2GS_Out::default_instance_ = new C2GS_Out();
  GS2C_Out::default_instance_ = new GS2C_Out();
  C2GS_OutBroadcast::default_instance_ = new C2GS_OutBroadcast();
  GS2C_OutBroadcast::default_instance_ = new GS2C_OutBroadcast();
  C2GS_OperateAskBroadcast::default_instance_ = new C2GS_OperateAskBroadcast();
  GS2C_OperateAskBroadcast::default_instance_ = new GS2C_OperateAskBroadcast();
  C2GS_Operate::default_instance_ = new C2GS_Operate();
  GS2C_Operate::default_instance_ = new GS2C_Operate();
  C2GS_OperateResultBroadcast::default_instance_ = new C2GS_OperateResultBroadcast();
  GS2C_OperateResultBroadcast::default_instance_ = new GS2C_OperateResultBroadcast();
  C2GS_MinglouAsk::default_instance_ = new C2GS_MinglouAsk();
  GS2C_MinglouAsk::default_instance_ = new GS2C_MinglouAsk();
  C2GS_Minglou::default_instance_ = new C2GS_Minglou();
  GS2C_Minglou::default_instance_ = new GS2C_Minglou();
  C2GS_MinglouBroadcast::default_instance_ = new C2GS_MinglouBroadcast();
  GS2C_MinglouBroadcast::default_instance_ = new GS2C_MinglouBroadcast();
  C2GS_Chat::default_instance_ = new C2GS_Chat();
  GS2C_Chat::default_instance_ = new GS2C_Chat();
  C2GS_ChatBroadcast::default_instance_ = new C2GS_ChatBroadcast();
  GS2C_ChatBroadcast::default_instance_ = new GS2C_ChatBroadcast();
  ResultItem::default_instance_ = new ResultItem();
  C2GS_RoundResultBroadcast::default_instance_ = new C2GS_RoundResultBroadcast();
  GS2C_RoundResultBroadcast::default_instance_ = new GS2C_RoundResultBroadcast();
  HistoryItem::default_instance_ = new HistoryItem();
  C2GS_HistoryBroadcast::default_instance_ = new C2GS_HistoryBroadcast();
  GS2C_HistoryBroadcast::default_instance_ = new GS2C_HistoryBroadcast();
  C2GS_DismissAskBroadcast::default_instance_ = new C2GS_DismissAskBroadcast();
  GS2C_DismissAskBroadcast::default_instance_ = new GS2C_DismissAskBroadcast();
  C2GS_DismissAnswer::default_instance_ = new C2GS_DismissAnswer();
  GS2C_DismissAnswer::default_instance_ = new GS2C_DismissAnswer();
  C2GS_DismissAnswerBroadcast::default_instance_ = new C2GS_DismissAnswerBroadcast();
  GS2C_DismissAnswerBroadcast::default_instance_ = new GS2C_DismissAnswerBroadcast();
  C2GS_DismissBroadcast::default_instance_ = new C2GS_DismissBroadcast();
  GS2C_DismissBroadcast::default_instance_ = new GS2C_DismissBroadcast();
  C2GS_VoiceTalk::default_instance_ = new C2GS_VoiceTalk();
  GS2C_VoiceTalk::default_instance_ = new GS2C_VoiceTalk();
  C2GS_VoiceTalkBroadcast::default_instance_ = new C2GS_VoiceTalkBroadcast();
  GS2C_VoiceTalkBroadcast::default_instance_ = new GS2C_VoiceTalkBroadcast();
  C2GS_ChatCustom::default_instance_ = new C2GS_ChatCustom();
  GS2C_ChatCustom::default_instance_ = new GS2C_ChatCustom();
  C2GS_ChatCustomBroadcast::default_instance_ = new C2GS_ChatCustomBroadcast();
  GS2C_ChatCustomBroadcast::default_instance_ = new GS2C_ChatCustomBroadcast();
  C2GS_Ready::default_instance_ = new C2GS_Ready();
  GS2C_Ready::default_instance_ = new GS2C_Ready();
  C2GS_ReadyBroadcast::default_instance_ = new C2GS_ReadyBroadcast();
  GS2C_ReadyBroadcast::default_instance_ = new GS2C_ReadyBroadcast();
  C2GS_GetJuCnt::default_instance_ = new C2GS_GetJuCnt();
  GS2C_GetJuCnt::default_instance_ = new GS2C_GetJuCnt();
  C2GS_PingPong::default_instance_->InitAsDefaultInstance();
  GS2C_PingPong::default_instance_->InitAsDefaultInstance();
  C2GS_PingPongAskBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_PingPongAskBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_Login::default_instance_->InitAsDefaultInstance();
  GS2C_Login::default_instance_->InitAsDefaultInstance();
  C2GS_JoinTable::default_instance_->InitAsDefaultInstance();
  UsrInfo::default_instance_->InitAsDefaultInstance();
  WeaveItem::default_instance_->InitAsDefaultInstance();
  ReconnectItem::default_instance_->InitAsDefaultInstance();
  GS2C_JoinTable::default_instance_->InitAsDefaultInstance();
  C2GS_JoinTableBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_JoinTableBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_BreakBackBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_BreakBackBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_LeaveTable::default_instance_->InitAsDefaultInstance();
  GS2C_LeaveTable::default_instance_->InitAsDefaultInstance();
  C2GS_LeaveTableBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_LeaveTableBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_BreakBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_BreakBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_StartReplaceBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_StartReplaceBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_RoundStartBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_RoundStartBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_DispatchBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_DispatchBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_Out::default_instance_->InitAsDefaultInstance();
  GS2C_Out::default_instance_->InitAsDefaultInstance();
  C2GS_OutBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_OutBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_OperateAskBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_OperateAskBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_Operate::default_instance_->InitAsDefaultInstance();
  GS2C_Operate::default_instance_->InitAsDefaultInstance();
  C2GS_OperateResultBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_OperateResultBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_MinglouAsk::default_instance_->InitAsDefaultInstance();
  GS2C_MinglouAsk::default_instance_->InitAsDefaultInstance();
  C2GS_Minglou::default_instance_->InitAsDefaultInstance();
  GS2C_Minglou::default_instance_->InitAsDefaultInstance();
  C2GS_MinglouBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_MinglouBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_Chat::default_instance_->InitAsDefaultInstance();
  GS2C_Chat::default_instance_->InitAsDefaultInstance();
  C2GS_ChatBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_ChatBroadcast::default_instance_->InitAsDefaultInstance();
  ResultItem::default_instance_->InitAsDefaultInstance();
  C2GS_RoundResultBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_RoundResultBroadcast::default_instance_->InitAsDefaultInstance();
  HistoryItem::default_instance_->InitAsDefaultInstance();
  C2GS_HistoryBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_HistoryBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_DismissAskBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_DismissAskBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_DismissAnswer::default_instance_->InitAsDefaultInstance();
  GS2C_DismissAnswer::default_instance_->InitAsDefaultInstance();
  C2GS_DismissAnswerBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_DismissAnswerBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_DismissBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_DismissBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_VoiceTalk::default_instance_->InitAsDefaultInstance();
  GS2C_VoiceTalk::default_instance_->InitAsDefaultInstance();
  C2GS_VoiceTalkBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_VoiceTalkBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_ChatCustom::default_instance_->InitAsDefaultInstance();
  GS2C_ChatCustom::default_instance_->InitAsDefaultInstance();
  C2GS_ChatCustomBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_ChatCustomBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_Ready::default_instance_->InitAsDefaultInstance();
  GS2C_Ready::default_instance_->InitAsDefaultInstance();
  C2GS_ReadyBroadcast::default_instance_->InitAsDefaultInstance();
  GS2C_ReadyBroadcast::default_instance_->InitAsDefaultInstance();
  C2GS_GetJuCnt::default_instance_->InitAsDefaultInstance();
  GS2C_GetJuCnt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_command_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_command_2eproto {
  StaticDescriptorInitializer_command_2eproto() {
    protobuf_AddDesc_command_2eproto();
  }
} static_descriptor_initializer_command_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int C2GS_PingPong::kUidFieldNumber;
#endif  // !_MSC_VER

C2GS_PingPong::C2GS_PingPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_PingPong::InitAsDefaultInstance() {
}

C2GS_PingPong::C2GS_PingPong(const C2GS_PingPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_PingPong::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_PingPong::~C2GS_PingPong() {
  SharedDtor();
}

void C2GS_PingPong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_PingPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_PingPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_PingPong_descriptor_;
}

const C2GS_PingPong& C2GS_PingPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_PingPong* C2GS_PingPong::default_instance_ = NULL;

C2GS_PingPong* C2GS_PingPong::New() const {
  return new C2GS_PingPong;
}

void C2GS_PingPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_PingPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_PingPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_PingPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_PingPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_PingPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_PingPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_PingPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_PingPong::MergeFrom(const C2GS_PingPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_PingPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_PingPong::CopyFrom(const C2GS_PingPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_PingPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_PingPong::Swap(C2GS_PingPong* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_PingPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_PingPong_descriptor_;
  metadata.reflection = C2GS_PingPong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PingPong::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_PingPong::GS2C_PingPong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PingPong::InitAsDefaultInstance() {
}

GS2C_PingPong::GS2C_PingPong(const GS2C_PingPong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PingPong::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PingPong::~GS2C_PingPong() {
  SharedDtor();
}

void GS2C_PingPong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_PingPong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PingPong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PingPong_descriptor_;
}

const GS2C_PingPong& GS2C_PingPong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_PingPong* GS2C_PingPong::default_instance_ = NULL;

GS2C_PingPong* GS2C_PingPong::New() const {
  return new GS2C_PingPong;
}

void GS2C_PingPong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PingPong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PingPong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PingPong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PingPong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PingPong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PingPong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PingPong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PingPong::MergeFrom(const GS2C_PingPong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PingPong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PingPong::CopyFrom(const GS2C_PingPong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PingPong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_PingPong::Swap(GS2C_PingPong* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PingPong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PingPong_descriptor_;
  metadata.reflection = GS2C_PingPong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_PingPongAskBroadcast::C2GS_PingPongAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_PingPongAskBroadcast::InitAsDefaultInstance() {
}

C2GS_PingPongAskBroadcast::C2GS_PingPongAskBroadcast(const C2GS_PingPongAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_PingPongAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_PingPongAskBroadcast::~C2GS_PingPongAskBroadcast() {
  SharedDtor();
}

void C2GS_PingPongAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_PingPongAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_PingPongAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_PingPongAskBroadcast_descriptor_;
}

const C2GS_PingPongAskBroadcast& C2GS_PingPongAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_PingPongAskBroadcast* C2GS_PingPongAskBroadcast::default_instance_ = NULL;

C2GS_PingPongAskBroadcast* C2GS_PingPongAskBroadcast::New() const {
  return new C2GS_PingPongAskBroadcast;
}

void C2GS_PingPongAskBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_PingPongAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_PingPongAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_PingPongAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_PingPongAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_PingPongAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_PingPongAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_PingPongAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_PingPongAskBroadcast::MergeFrom(const C2GS_PingPongAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_PingPongAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_PingPongAskBroadcast::CopyFrom(const C2GS_PingPongAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_PingPongAskBroadcast::IsInitialized() const {

  return true;
}

void C2GS_PingPongAskBroadcast::Swap(C2GS_PingPongAskBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_PingPongAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_PingPongAskBroadcast_descriptor_;
  metadata.reflection = C2GS_PingPongAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_PingPongAskBroadcast::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_PingPongAskBroadcast::GS2C_PingPongAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_PingPongAskBroadcast::InitAsDefaultInstance() {
}

GS2C_PingPongAskBroadcast::GS2C_PingPongAskBroadcast(const GS2C_PingPongAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_PingPongAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_PingPongAskBroadcast::~GS2C_PingPongAskBroadcast() {
  SharedDtor();
}

void GS2C_PingPongAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_PingPongAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_PingPongAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_PingPongAskBroadcast_descriptor_;
}

const GS2C_PingPongAskBroadcast& GS2C_PingPongAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_PingPongAskBroadcast* GS2C_PingPongAskBroadcast::default_instance_ = NULL;

GS2C_PingPongAskBroadcast* GS2C_PingPongAskBroadcast::New() const {
  return new GS2C_PingPongAskBroadcast;
}

void GS2C_PingPongAskBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_PingPongAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_PingPongAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_PingPongAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_PingPongAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_PingPongAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_PingPongAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_PingPongAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_PingPongAskBroadcast::MergeFrom(const GS2C_PingPongAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_PingPongAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_PingPongAskBroadcast::CopyFrom(const GS2C_PingPongAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_PingPongAskBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_PingPongAskBroadcast::Swap(GS2C_PingPongAskBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_PingPongAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_PingPongAskBroadcast_descriptor_;
  metadata.reflection = GS2C_PingPongAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Login::kUidFieldNumber;
const int C2GS_Login::kTableIdFieldNumber;
#endif  // !_MSC_VER

C2GS_Login::C2GS_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Login::InitAsDefaultInstance() {
}

C2GS_Login::C2GS_Login(const C2GS_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Login::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Login::~C2GS_Login() {
  SharedDtor();
}

void C2GS_Login::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Login_descriptor_;
}

const C2GS_Login& C2GS_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Login* C2GS_Login::default_instance_ = NULL;

C2GS_Login* C2GS_Login::New() const {
  return new C2GS_Login;
}

void C2GS_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required int32 table_id = 2;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required int32 table_id = 2;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Login::MergeFrom(const C2GS_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Login::CopyFrom(const C2GS_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_Login::Swap(C2GS_Login* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Login_descriptor_;
  metadata.reflection = C2GS_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Login::kErrorcodeFieldNumber;
const int GS2C_Login::kSessionIdFieldNumber;
#endif  // !_MSC_VER

GS2C_Login::GS2C_Login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Login::InitAsDefaultInstance() {
}

GS2C_Login::GS2C_Login(const GS2C_Login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Login::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Login::~GS2C_Login() {
  SharedDtor();
}

void GS2C_Login::SharedDtor() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Login_descriptor_;
}

const GS2C_Login& GS2C_Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Login* GS2C_Login::default_instance_ = NULL;

GS2C_Login* GS2C_Login::New() const {
  return new GS2C_Login;
}

void GS2C_Login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_id;
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional string session_id = 2;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional string session_id = 2;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Login::MergeFrom(const GS2C_Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Login::CopyFrom(const GS2C_Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Login::Swap(GS2C_Login* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Login_descriptor_;
  metadata.reflection = GS2C_Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_JoinTable::kTableIdFieldNumber;
const int C2GS_JoinTable::kSeatIdFieldNumber;
#endif  // !_MSC_VER

C2GS_JoinTable::C2GS_JoinTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_JoinTable::InitAsDefaultInstance() {
}

C2GS_JoinTable::C2GS_JoinTable(const C2GS_JoinTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_JoinTable::SharedCtor() {
  _cached_size_ = 0;
  table_id_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_JoinTable::~C2GS_JoinTable() {
  SharedDtor();
}

void C2GS_JoinTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_JoinTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_JoinTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_JoinTable_descriptor_;
}

const C2GS_JoinTable& C2GS_JoinTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_JoinTable* C2GS_JoinTable::default_instance_ = NULL;

C2GS_JoinTable* C2GS_JoinTable::New() const {
  return new C2GS_JoinTable;
}

void C2GS_JoinTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    table_id_ = 0;
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_JoinTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat_id;
        break;
      }

      // required int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_JoinTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // required int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_JoinTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 table_id = 1;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // required int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_JoinTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_JoinTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_JoinTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_JoinTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_JoinTable::MergeFrom(const C2GS_JoinTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_JoinTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_JoinTable::CopyFrom(const C2GS_JoinTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_JoinTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void C2GS_JoinTable::Swap(C2GS_JoinTable* other) {
  if (other != this) {
    std::swap(table_id_, other->table_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_JoinTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_JoinTable_descriptor_;
  metadata.reflection = C2GS_JoinTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsrInfo::kUidFieldNumber;
const int UsrInfo::kWeichatNickFieldNumber;
const int UsrInfo::kWeichatFaceAddressFieldNumber;
const int UsrInfo::kBigGoldFieldNumber;
const int UsrInfo::kGoldFieldNumber;
const int UsrInfo::kSexFieldNumber;
const int UsrInfo::kIpFieldNumber;
const int UsrInfo::kStatusFieldNumber;
const int UsrInfo::kSeatidFieldNumber;
#endif  // !_MSC_VER

UsrInfo::UsrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsrInfo::InitAsDefaultInstance() {
}

UsrInfo::UsrInfo(const UsrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsrInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  weichat_nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weichat_face_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  big_gold_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  sex_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsrInfo::~UsrInfo() {
  SharedDtor();
}

void UsrInfo::SharedDtor() {
  if (weichat_nick_ != &::google::protobuf::internal::kEmptyString) {
    delete weichat_nick_;
  }
  if (weichat_face_address_ != &::google::protobuf::internal::kEmptyString) {
    delete weichat_face_address_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void UsrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsrInfo_descriptor_;
}

const UsrInfo& UsrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

UsrInfo* UsrInfo::default_instance_ = NULL;

UsrInfo* UsrInfo::New() const {
  return new UsrInfo;
}

void UsrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    if (has_weichat_nick()) {
      if (weichat_nick_ != &::google::protobuf::internal::kEmptyString) {
        weichat_nick_->clear();
      }
    }
    if (has_weichat_face_address()) {
      if (weichat_face_address_ != &::google::protobuf::internal::kEmptyString) {
        weichat_face_address_->clear();
      }
    }
    big_gold_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    sex_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    status_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_weichat_nick;
        break;
      }

      // required string weichat_nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weichat_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weichat_nick()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weichat_nick().data(), this->weichat_nick().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weichat_face_address;
        break;
      }

      // required string weichat_face_address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weichat_face_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weichat_face_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weichat_face_address().data(), this->weichat_face_address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_big_gold;
        break;
      }

      // required int64 big_gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_big_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &big_gold_)));
          set_has_big_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // required int64 gold = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // required int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ip;
        break;
      }

      // required string ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // required int32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // required string weichat_nick = 2;
  if (has_weichat_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weichat_nick().data(), this->weichat_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->weichat_nick(), output);
  }

  // required string weichat_face_address = 3;
  if (has_weichat_face_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weichat_face_address().data(), this->weichat_face_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->weichat_face_address(), output);
  }

  // required int64 big_gold = 4;
  if (has_big_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->big_gold(), output);
  }

  // required int64 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->gold(), output);
  }

  // required int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // required string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ip(), output);
  }

  // required int32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->status(), output);
  }

  // required int32 seatid = 9;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // required string weichat_nick = 2;
  if (has_weichat_nick()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weichat_nick().data(), this->weichat_nick().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->weichat_nick(), target);
  }

  // required string weichat_face_address = 3;
  if (has_weichat_face_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weichat_face_address().data(), this->weichat_face_address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weichat_face_address(), target);
  }

  // required int64 big_gold = 4;
  if (has_big_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->big_gold(), target);
  }

  // required int64 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->gold(), target);
  }

  // required int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // required string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // required int32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->status(), target);
  }

  // required int32 seatid = 9;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required string weichat_nick = 2;
    if (has_weichat_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weichat_nick());
    }

    // required string weichat_face_address = 3;
    if (has_weichat_face_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weichat_face_address());
    }

    // required int64 big_gold = 4;
    if (has_big_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->big_gold());
    }

    // required int64 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // required int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 seatid = 9;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsrInfo::MergeFrom(const UsrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_weichat_nick()) {
      set_weichat_nick(from.weichat_nick());
    }
    if (from.has_weichat_face_address()) {
      set_weichat_face_address(from.weichat_face_address());
    }
    if (from.has_big_gold()) {
      set_big_gold(from.big_gold());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsrInfo::CopyFrom(const UsrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsrInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void UsrInfo::Swap(UsrInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(weichat_nick_, other->weichat_nick_);
    std::swap(weichat_face_address_, other->weichat_face_address_);
    std::swap(big_gold_, other->big_gold_);
    std::swap(gold_, other->gold_);
    std::swap(sex_, other->sex_);
    std::swap(ip_, other->ip_);
    std::swap(status_, other->status_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsrInfo_descriptor_;
  metadata.reflection = UsrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaveItem::kWeaveKindFieldNumber;
const int WeaveItem::kCardsFieldNumber;
const int WeaveItem::kIsAngangFieldNumber;
#endif  // !_MSC_VER

WeaveItem::WeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaveItem::InitAsDefaultInstance() {
}

WeaveItem::WeaveItem(const WeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weave_kind_ = GOOGLE_LONGLONG(0);
  is_angang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaveItem::~WeaveItem() {
  SharedDtor();
}

void WeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaveItem_descriptor_;
}

const WeaveItem& WeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

WeaveItem* WeaveItem::default_instance_ = NULL;

WeaveItem* WeaveItem::New() const {
  return new WeaveItem;
}

void WeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weave_kind_ = GOOGLE_LONGLONG(0);
    is_angang_ = 0;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 weave_kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &weave_kind_)));
          set_has_weave_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        break;
      }

      // repeated int32 cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cards;
        if (input->ExpectTag(24)) goto parse_is_angang;
        break;
      }

      // optional int32 is_angang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_angang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_angang_)));
          set_has_is_angang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 weave_kind = 1;
  if (has_weave_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->weave_kind(), output);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cards(i), output);
  }

  // optional int32 is_angang = 3;
  if (has_is_angang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_angang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 weave_kind = 1;
  if (has_weave_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->weave_kind(), target);
  }

  // repeated int32 cards = 2;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cards(i), target);
  }

  // optional int32 is_angang = 3;
  if (has_is_angang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_angang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 weave_kind = 1;
    if (has_weave_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->weave_kind());
    }

    // optional int32 is_angang = 3;
    if (has_is_angang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_angang());
    }

  }
  // repeated int32 cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaveItem::MergeFrom(const WeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weave_kind()) {
      set_weave_kind(from.weave_kind());
    }
    if (from.has_is_angang()) {
      set_is_angang(from.is_angang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaveItem::CopyFrom(const WeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaveItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WeaveItem::Swap(WeaveItem* other) {
  if (other != this) {
    std::swap(weave_kind_, other->weave_kind_);
    cards_.Swap(&other->cards_);
    std::swap(is_angang_, other->is_angang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaveItem_descriptor_;
  metadata.reflection = WeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectItem::kHandCardsFieldNumber;
const int ReconnectItem::kHandCntsFieldNumber;
const int ReconnectItem::kWeaves1FieldNumber;
const int ReconnectItem::kWeaves2FieldNumber;
const int ReconnectItem::kWeaves3FieldNumber;
const int ReconnectItem::kWeaves4FieldNumber;
const int ReconnectItem::kDismissCards1FieldNumber;
const int ReconnectItem::kDismissCards2FieldNumber;
const int ReconnectItem::kDismissCards3FieldNumber;
const int ReconnectItem::kDismissCards4FieldNumber;
const int ReconnectItem::kMinglouCards1FieldNumber;
const int ReconnectItem::kMinglouCards2FieldNumber;
const int ReconnectItem::kMinglouCards3FieldNumber;
const int ReconnectItem::kMinglouCards4FieldNumber;
const int ReconnectItem::kCurrentUidFieldNumber;
const int ReconnectItem::kLeftCardCntFieldNumber;
const int ReconnectItem::kLeftRoundFieldNumber;
const int ReconnectItem::kIsMinglousFieldNumber;
const int ReconnectItem::kHuaCntsFieldNumber;
const int ReconnectItem::kActionsFieldNumber;
#endif  // !_MSC_VER

ReconnectItem::ReconnectItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectItem::InitAsDefaultInstance() {
}

ReconnectItem::ReconnectItem(const ReconnectItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectItem::SharedCtor() {
  _cached_size_ = 0;
  current_uid_ = 0;
  left_card_cnt_ = 0;
  left_round_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectItem::~ReconnectItem() {
  SharedDtor();
}

void ReconnectItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReconnectItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectItem_descriptor_;
}

const ReconnectItem& ReconnectItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

ReconnectItem* ReconnectItem::default_instance_ = NULL;

ReconnectItem* ReconnectItem::New() const {
  return new ReconnectItem;
}

void ReconnectItem::Clear() {
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    current_uid_ = 0;
    left_card_cnt_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    left_round_ = 0;
  }
  hand_cards_.Clear();
  hand_cnts_.Clear();
  weaves1_.Clear();
  weaves2_.Clear();
  weaves3_.Clear();
  weaves4_.Clear();
  dismiss_cards_1_.Clear();
  dismiss_cards_2_.Clear();
  dismiss_cards_3_.Clear();
  dismiss_cards_4_.Clear();
  minglou_cards_1_.Clear();
  minglou_cards_2_.Clear();
  minglou_cards_3_.Clear();
  minglou_cards_4_.Clear();
  is_minglous_.Clear();
  hua_cnts_.Clear();
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 hand_cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_hand_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hand_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_hand_cards;
        if (input->ExpectTag(16)) goto parse_hand_cnts;
        break;
      }

      // repeated int32 hand_cnts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_cnts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hand_cnts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hand_cnts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hand_cnts;
        if (input->ExpectTag(26)) goto parse_weaves1;
        break;
      }

      // repeated .pb.WeaveItem weaves1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves1;
        if (input->ExpectTag(34)) goto parse_weaves2;
        break;
      }

      // repeated .pb.WeaveItem weaves2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_weaves2;
        if (input->ExpectTag(42)) goto parse_weaves3;
        break;
      }

      // repeated .pb.WeaveItem weaves3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_weaves3;
        if (input->ExpectTag(50)) goto parse_weaves4;
        break;
      }

      // repeated .pb.WeaveItem weaves4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_weaves4;
        if (input->ExpectTag(56)) goto parse_dismiss_cards_1;
        break;
      }

      // repeated int32 dismiss_cards_1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss_cards_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dismiss_cards_1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dismiss_cards_1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dismiss_cards_1;
        if (input->ExpectTag(64)) goto parse_dismiss_cards_2;
        break;
      }

      // repeated int32 dismiss_cards_2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss_cards_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dismiss_cards_2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dismiss_cards_2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dismiss_cards_2;
        if (input->ExpectTag(72)) goto parse_dismiss_cards_3;
        break;
      }

      // repeated int32 dismiss_cards_3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss_cards_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_dismiss_cards_3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dismiss_cards_3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_dismiss_cards_3;
        if (input->ExpectTag(80)) goto parse_dismiss_cards_4;
        break;
      }

      // repeated int32 dismiss_cards_4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss_cards_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_dismiss_cards_4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dismiss_cards_4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dismiss_cards_4;
        if (input->ExpectTag(88)) goto parse_minglou_cards_1;
        break;
      }

      // repeated int32 minglou_cards_1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_cards_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_minglou_cards_1())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minglou_cards_1())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_minglou_cards_1;
        if (input->ExpectTag(96)) goto parse_minglou_cards_2;
        break;
      }

      // repeated int32 minglou_cards_2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_cards_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_minglou_cards_2())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minglou_cards_2())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_minglou_cards_2;
        if (input->ExpectTag(104)) goto parse_minglou_cards_3;
        break;
      }

      // repeated int32 minglou_cards_3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_cards_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 104, input, this->mutable_minglou_cards_3())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minglou_cards_3())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_minglou_cards_3;
        if (input->ExpectTag(112)) goto parse_minglou_cards_4;
        break;
      }

      // repeated int32 minglou_cards_4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_cards_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112, input, this->mutable_minglou_cards_4())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minglou_cards_4())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_minglou_cards_4;
        if (input->ExpectTag(120)) goto parse_current_uid;
        break;
      }

      // optional int32 current_uid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_uid_)));
          set_has_current_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_left_card_cnt;
        break;
      }

      // optional int32 left_card_cnt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_cnt_)));
          set_has_left_card_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_left_round;
        break;
      }

      // optional int32 left_round = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_round_)));
          set_has_left_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_minglous;
        break;
      }

      // repeated int32 is_minglous = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_minglous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_is_minglous())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_is_minglous())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_is_minglous;
        if (input->ExpectTag(152)) goto parse_hua_cnts;
        break;
      }

      // repeated int32 hua_cnts = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hua_cnts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_hua_cnts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hua_cnts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hua_cnts;
        if (input->ExpectTag(160)) goto parse_actions;
        break;
      }

      // repeated int32 actions = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_actions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_actions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->hand_cards(i), output);
  }

  // repeated int32 hand_cnts = 2;
  for (int i = 0; i < this->hand_cnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hand_cnts(i), output);
  }

  // repeated .pb.WeaveItem weaves1 = 3;
  for (int i = 0; i < this->weaves1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves1(i), output);
  }

  // repeated .pb.WeaveItem weaves2 = 4;
  for (int i = 0; i < this->weaves2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weaves2(i), output);
  }

  // repeated .pb.WeaveItem weaves3 = 5;
  for (int i = 0; i < this->weaves3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weaves3(i), output);
  }

  // repeated .pb.WeaveItem weaves4 = 6;
  for (int i = 0; i < this->weaves4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->weaves4(i), output);
  }

  // repeated int32 dismiss_cards_1 = 7;
  for (int i = 0; i < this->dismiss_cards_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dismiss_cards_1(i), output);
  }

  // repeated int32 dismiss_cards_2 = 8;
  for (int i = 0; i < this->dismiss_cards_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dismiss_cards_2(i), output);
  }

  // repeated int32 dismiss_cards_3 = 9;
  for (int i = 0; i < this->dismiss_cards_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->dismiss_cards_3(i), output);
  }

  // repeated int32 dismiss_cards_4 = 10;
  for (int i = 0; i < this->dismiss_cards_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->dismiss_cards_4(i), output);
  }

  // repeated int32 minglou_cards_1 = 11;
  for (int i = 0; i < this->minglou_cards_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->minglou_cards_1(i), output);
  }

  // repeated int32 minglou_cards_2 = 12;
  for (int i = 0; i < this->minglou_cards_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->minglou_cards_2(i), output);
  }

  // repeated int32 minglou_cards_3 = 13;
  for (int i = 0; i < this->minglou_cards_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      13, this->minglou_cards_3(i), output);
  }

  // repeated int32 minglou_cards_4 = 14;
  for (int i = 0; i < this->minglou_cards_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->minglou_cards_4(i), output);
  }

  // optional int32 current_uid = 15;
  if (has_current_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->current_uid(), output);
  }

  // optional int32 left_card_cnt = 16;
  if (has_left_card_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->left_card_cnt(), output);
  }

  // optional int32 left_round = 17;
  if (has_left_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->left_round(), output);
  }

  // repeated int32 is_minglous = 18;
  for (int i = 0; i < this->is_minglous_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->is_minglous(i), output);
  }

  // repeated int32 hua_cnts = 19;
  for (int i = 0; i < this->hua_cnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->hua_cnts(i), output);
  }

  // repeated int32 actions = 20;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->actions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 hand_cards = 1;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->hand_cards(i), target);
  }

  // repeated int32 hand_cnts = 2;
  for (int i = 0; i < this->hand_cnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hand_cnts(i), target);
  }

  // repeated .pb.WeaveItem weaves1 = 3;
  for (int i = 0; i < this->weaves1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves1(i), target);
  }

  // repeated .pb.WeaveItem weaves2 = 4;
  for (int i = 0; i < this->weaves2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->weaves2(i), target);
  }

  // repeated .pb.WeaveItem weaves3 = 5;
  for (int i = 0; i < this->weaves3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weaves3(i), target);
  }

  // repeated .pb.WeaveItem weaves4 = 6;
  for (int i = 0; i < this->weaves4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->weaves4(i), target);
  }

  // repeated int32 dismiss_cards_1 = 7;
  for (int i = 0; i < this->dismiss_cards_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dismiss_cards_1(i), target);
  }

  // repeated int32 dismiss_cards_2 = 8;
  for (int i = 0; i < this->dismiss_cards_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dismiss_cards_2(i), target);
  }

  // repeated int32 dismiss_cards_3 = 9;
  for (int i = 0; i < this->dismiss_cards_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->dismiss_cards_3(i), target);
  }

  // repeated int32 dismiss_cards_4 = 10;
  for (int i = 0; i < this->dismiss_cards_4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->dismiss_cards_4(i), target);
  }

  // repeated int32 minglou_cards_1 = 11;
  for (int i = 0; i < this->minglou_cards_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->minglou_cards_1(i), target);
  }

  // repeated int32 minglou_cards_2 = 12;
  for (int i = 0; i < this->minglou_cards_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->minglou_cards_2(i), target);
  }

  // repeated int32 minglou_cards_3 = 13;
  for (int i = 0; i < this->minglou_cards_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(13, this->minglou_cards_3(i), target);
  }

  // repeated int32 minglou_cards_4 = 14;
  for (int i = 0; i < this->minglou_cards_4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(14, this->minglou_cards_4(i), target);
  }

  // optional int32 current_uid = 15;
  if (has_current_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->current_uid(), target);
  }

  // optional int32 left_card_cnt = 16;
  if (has_left_card_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->left_card_cnt(), target);
  }

  // optional int32 left_round = 17;
  if (has_left_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->left_round(), target);
  }

  // repeated int32 is_minglous = 18;
  for (int i = 0; i < this->is_minglous_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->is_minglous(i), target);
  }

  // repeated int32 hua_cnts = 19;
  for (int i = 0; i < this->hua_cnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->hua_cnts(i), target);
  }

  // repeated int32 actions = 20;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->actions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional int32 current_uid = 15;
    if (has_current_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_uid());
    }

    // optional int32 left_card_cnt = 16;
    if (has_left_card_cnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_cnt());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 left_round = 17;
    if (has_left_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_round());
    }

  }
  // repeated int32 hand_cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hand_cards(i));
    }
    total_size += 1 * this->hand_cards_size() + data_size;
  }

  // repeated int32 hand_cnts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_cnts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hand_cnts(i));
    }
    total_size += 1 * this->hand_cnts_size() + data_size;
  }

  // repeated .pb.WeaveItem weaves1 = 3;
  total_size += 1 * this->weaves1_size();
  for (int i = 0; i < this->weaves1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves1(i));
  }

  // repeated .pb.WeaveItem weaves2 = 4;
  total_size += 1 * this->weaves2_size();
  for (int i = 0; i < this->weaves2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves2(i));
  }

  // repeated .pb.WeaveItem weaves3 = 5;
  total_size += 1 * this->weaves3_size();
  for (int i = 0; i < this->weaves3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves3(i));
  }

  // repeated .pb.WeaveItem weaves4 = 6;
  total_size += 1 * this->weaves4_size();
  for (int i = 0; i < this->weaves4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves4(i));
  }

  // repeated int32 dismiss_cards_1 = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dismiss_cards_1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dismiss_cards_1(i));
    }
    total_size += 1 * this->dismiss_cards_1_size() + data_size;
  }

  // repeated int32 dismiss_cards_2 = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dismiss_cards_2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dismiss_cards_2(i));
    }
    total_size += 1 * this->dismiss_cards_2_size() + data_size;
  }

  // repeated int32 dismiss_cards_3 = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->dismiss_cards_3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dismiss_cards_3(i));
    }
    total_size += 1 * this->dismiss_cards_3_size() + data_size;
  }

  // repeated int32 dismiss_cards_4 = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->dismiss_cards_4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dismiss_cards_4(i));
    }
    total_size += 1 * this->dismiss_cards_4_size() + data_size;
  }

  // repeated int32 minglou_cards_1 = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->minglou_cards_1_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minglou_cards_1(i));
    }
    total_size += 1 * this->minglou_cards_1_size() + data_size;
  }

  // repeated int32 minglou_cards_2 = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->minglou_cards_2_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minglou_cards_2(i));
    }
    total_size += 1 * this->minglou_cards_2_size() + data_size;
  }

  // repeated int32 minglou_cards_3 = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->minglou_cards_3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minglou_cards_3(i));
    }
    total_size += 1 * this->minglou_cards_3_size() + data_size;
  }

  // repeated int32 minglou_cards_4 = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->minglou_cards_4_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minglou_cards_4(i));
    }
    total_size += 1 * this->minglou_cards_4_size() + data_size;
  }

  // repeated int32 is_minglous = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->is_minglous_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->is_minglous(i));
    }
    total_size += 2 * this->is_minglous_size() + data_size;
  }

  // repeated int32 hua_cnts = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->hua_cnts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hua_cnts(i));
    }
    total_size += 2 * this->hua_cnts_size() + data_size;
  }

  // repeated int32 actions = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actions(i));
    }
    total_size += 2 * this->actions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectItem::MergeFrom(const ReconnectItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  hand_cnts_.MergeFrom(from.hand_cnts_);
  weaves1_.MergeFrom(from.weaves1_);
  weaves2_.MergeFrom(from.weaves2_);
  weaves3_.MergeFrom(from.weaves3_);
  weaves4_.MergeFrom(from.weaves4_);
  dismiss_cards_1_.MergeFrom(from.dismiss_cards_1_);
  dismiss_cards_2_.MergeFrom(from.dismiss_cards_2_);
  dismiss_cards_3_.MergeFrom(from.dismiss_cards_3_);
  dismiss_cards_4_.MergeFrom(from.dismiss_cards_4_);
  minglou_cards_1_.MergeFrom(from.minglou_cards_1_);
  minglou_cards_2_.MergeFrom(from.minglou_cards_2_);
  minglou_cards_3_.MergeFrom(from.minglou_cards_3_);
  minglou_cards_4_.MergeFrom(from.minglou_cards_4_);
  is_minglous_.MergeFrom(from.is_minglous_);
  hua_cnts_.MergeFrom(from.hua_cnts_);
  actions_.MergeFrom(from.actions_);
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_current_uid()) {
      set_current_uid(from.current_uid());
    }
    if (from.has_left_card_cnt()) {
      set_left_card_cnt(from.left_card_cnt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_left_round()) {
      set_left_round(from.left_round());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectItem::CopyFrom(const ReconnectItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectItem::IsInitialized() const {

  for (int i = 0; i < weaves1_size(); i++) {
    if (!this->weaves1(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weaves2_size(); i++) {
    if (!this->weaves2(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weaves3_size(); i++) {
    if (!this->weaves3(i).IsInitialized()) return false;
  }
  for (int i = 0; i < weaves4_size(); i++) {
    if (!this->weaves4(i).IsInitialized()) return false;
  }
  return true;
}

void ReconnectItem::Swap(ReconnectItem* other) {
  if (other != this) {
    hand_cards_.Swap(&other->hand_cards_);
    hand_cnts_.Swap(&other->hand_cnts_);
    weaves1_.Swap(&other->weaves1_);
    weaves2_.Swap(&other->weaves2_);
    weaves3_.Swap(&other->weaves3_);
    weaves4_.Swap(&other->weaves4_);
    dismiss_cards_1_.Swap(&other->dismiss_cards_1_);
    dismiss_cards_2_.Swap(&other->dismiss_cards_2_);
    dismiss_cards_3_.Swap(&other->dismiss_cards_3_);
    dismiss_cards_4_.Swap(&other->dismiss_cards_4_);
    minglou_cards_1_.Swap(&other->minglou_cards_1_);
    minglou_cards_2_.Swap(&other->minglou_cards_2_);
    minglou_cards_3_.Swap(&other->minglou_cards_3_);
    minglou_cards_4_.Swap(&other->minglou_cards_4_);
    std::swap(current_uid_, other->current_uid_);
    std::swap(left_card_cnt_, other->left_card_cnt_);
    std::swap(left_round_, other->left_round_);
    is_minglous_.Swap(&other->is_minglous_);
    hua_cnts_.Swap(&other->hua_cnts_);
    actions_.Swap(&other->actions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectItem_descriptor_;
  metadata.reflection = ReconnectItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_JoinTable::kErrorcodeFieldNumber;
const int GS2C_JoinTable::kUsrInfoListFieldNumber;
const int GS2C_JoinTable::kReconnectFieldNumber;
const int GS2C_JoinTable::kBankerUidFieldNumber;
#endif  // !_MSC_VER

GS2C_JoinTable::GS2C_JoinTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_JoinTable::InitAsDefaultInstance() {
  reconnect_ = const_cast< ::pb::ReconnectItem*>(&::pb::ReconnectItem::default_instance());
}

GS2C_JoinTable::GS2C_JoinTable(const GS2C_JoinTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_JoinTable::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  reconnect_ = NULL;
  banker_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_JoinTable::~GS2C_JoinTable() {
  SharedDtor();
}

void GS2C_JoinTable::SharedDtor() {
  if (this != default_instance_) {
    delete reconnect_;
  }
}

void GS2C_JoinTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_JoinTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_JoinTable_descriptor_;
}

const GS2C_JoinTable& GS2C_JoinTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_JoinTable* GS2C_JoinTable::default_instance_ = NULL;

GS2C_JoinTable* GS2C_JoinTable::New() const {
  return new GS2C_JoinTable;
}

void GS2C_JoinTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_reconnect()) {
      if (reconnect_ != NULL) reconnect_->::pb::ReconnectItem::Clear();
    }
    banker_uid_ = 0;
  }
  usr_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_JoinTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usr_info_list;
        break;
      }

      // repeated .pb.UsrInfo usr_info_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usr_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usr_info_list;
        if (input->ExpectTag(26)) goto parse_reconnect;
        break;
      }

      // optional .pb.ReconnectItem reconnect = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reconnect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reconnect()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_banker_uid;
        break;
      }

      // optional int32 banker_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_uid_)));
          set_has_banker_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_JoinTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // repeated .pb.UsrInfo usr_info_list = 2;
  for (int i = 0; i < this->usr_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usr_info_list(i), output);
  }

  // optional .pb.ReconnectItem reconnect = 3;
  if (has_reconnect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reconnect(), output);
  }

  // optional int32 banker_uid = 4;
  if (has_banker_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->banker_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_JoinTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // repeated .pb.UsrInfo usr_info_list = 2;
  for (int i = 0; i < this->usr_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usr_info_list(i), target);
  }

  // optional .pb.ReconnectItem reconnect = 3;
  if (has_reconnect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reconnect(), target);
  }

  // optional int32 banker_uid = 4;
  if (has_banker_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->banker_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_JoinTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional .pb.ReconnectItem reconnect = 3;
    if (has_reconnect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reconnect());
    }

    // optional int32 banker_uid = 4;
    if (has_banker_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_uid());
    }

  }
  // repeated .pb.UsrInfo usr_info_list = 2;
  total_size += 1 * this->usr_info_list_size();
  for (int i = 0; i < this->usr_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usr_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_JoinTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_JoinTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_JoinTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_JoinTable::MergeFrom(const GS2C_JoinTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  usr_info_list_.MergeFrom(from.usr_info_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_reconnect()) {
      mutable_reconnect()->::pb::ReconnectItem::MergeFrom(from.reconnect());
    }
    if (from.has_banker_uid()) {
      set_banker_uid(from.banker_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_JoinTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_JoinTable::CopyFrom(const GS2C_JoinTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_JoinTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < usr_info_list_size(); i++) {
    if (!this->usr_info_list(i).IsInitialized()) return false;
  }
  if (has_reconnect()) {
    if (!this->reconnect().IsInitialized()) return false;
  }
  return true;
}

void GS2C_JoinTable::Swap(GS2C_JoinTable* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    usr_info_list_.Swap(&other->usr_info_list_);
    std::swap(reconnect_, other->reconnect_);
    std::swap(banker_uid_, other->banker_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_JoinTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_JoinTable_descriptor_;
  metadata.reflection = GS2C_JoinTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_JoinTableBroadcast::C2GS_JoinTableBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_JoinTableBroadcast::InitAsDefaultInstance() {
}

C2GS_JoinTableBroadcast::C2GS_JoinTableBroadcast(const C2GS_JoinTableBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_JoinTableBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_JoinTableBroadcast::~C2GS_JoinTableBroadcast() {
  SharedDtor();
}

void C2GS_JoinTableBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_JoinTableBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_JoinTableBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_JoinTableBroadcast_descriptor_;
}

const C2GS_JoinTableBroadcast& C2GS_JoinTableBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_JoinTableBroadcast* C2GS_JoinTableBroadcast::default_instance_ = NULL;

C2GS_JoinTableBroadcast* C2GS_JoinTableBroadcast::New() const {
  return new C2GS_JoinTableBroadcast;
}

void C2GS_JoinTableBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_JoinTableBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_JoinTableBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_JoinTableBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_JoinTableBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_JoinTableBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_JoinTableBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_JoinTableBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_JoinTableBroadcast::MergeFrom(const C2GS_JoinTableBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_JoinTableBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_JoinTableBroadcast::CopyFrom(const C2GS_JoinTableBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_JoinTableBroadcast::IsInitialized() const {

  return true;
}

void C2GS_JoinTableBroadcast::Swap(C2GS_JoinTableBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_JoinTableBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_JoinTableBroadcast_descriptor_;
  metadata.reflection = C2GS_JoinTableBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_JoinTableBroadcast::kErrorcodeFieldNumber;
const int GS2C_JoinTableBroadcast::kUsrInfoFieldNumber;
const int GS2C_JoinTableBroadcast::kBankerUidFieldNumber;
#endif  // !_MSC_VER

GS2C_JoinTableBroadcast::GS2C_JoinTableBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_JoinTableBroadcast::InitAsDefaultInstance() {
  usr_info_ = const_cast< ::pb::UsrInfo*>(&::pb::UsrInfo::default_instance());
}

GS2C_JoinTableBroadcast::GS2C_JoinTableBroadcast(const GS2C_JoinTableBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_JoinTableBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  usr_info_ = NULL;
  banker_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_JoinTableBroadcast::~GS2C_JoinTableBroadcast() {
  SharedDtor();
}

void GS2C_JoinTableBroadcast::SharedDtor() {
  if (this != default_instance_) {
    delete usr_info_;
  }
}

void GS2C_JoinTableBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_JoinTableBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_JoinTableBroadcast_descriptor_;
}

const GS2C_JoinTableBroadcast& GS2C_JoinTableBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_JoinTableBroadcast* GS2C_JoinTableBroadcast::default_instance_ = NULL;

GS2C_JoinTableBroadcast* GS2C_JoinTableBroadcast::New() const {
  return new GS2C_JoinTableBroadcast;
}

void GS2C_JoinTableBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_usr_info()) {
      if (usr_info_ != NULL) usr_info_->::pb::UsrInfo::Clear();
    }
    banker_uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_JoinTableBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usr_info;
        break;
      }

      // required .pb.UsrInfo usr_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usr_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usr_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_banker_uid;
        break;
      }

      // optional int32 banker_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_uid_)));
          set_has_banker_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_JoinTableBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required .pb.UsrInfo usr_info = 2;
  if (has_usr_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usr_info(), output);
  }

  // optional int32 banker_uid = 3;
  if (has_banker_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->banker_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_JoinTableBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required .pb.UsrInfo usr_info = 2;
  if (has_usr_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usr_info(), target);
  }

  // optional int32 banker_uid = 3;
  if (has_banker_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->banker_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_JoinTableBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required .pb.UsrInfo usr_info = 2;
    if (has_usr_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usr_info());
    }

    // optional int32 banker_uid = 3;
    if (has_banker_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_JoinTableBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_JoinTableBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_JoinTableBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_JoinTableBroadcast::MergeFrom(const GS2C_JoinTableBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_usr_info()) {
      mutable_usr_info()->::pb::UsrInfo::MergeFrom(from.usr_info());
    }
    if (from.has_banker_uid()) {
      set_banker_uid(from.banker_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_JoinTableBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_JoinTableBroadcast::CopyFrom(const GS2C_JoinTableBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_JoinTableBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_usr_info()) {
    if (!this->usr_info().IsInitialized()) return false;
  }
  return true;
}

void GS2C_JoinTableBroadcast::Swap(GS2C_JoinTableBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(usr_info_, other->usr_info_);
    std::swap(banker_uid_, other->banker_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_JoinTableBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_JoinTableBroadcast_descriptor_;
  metadata.reflection = GS2C_JoinTableBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_BreakBackBroadcast::C2GS_BreakBackBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_BreakBackBroadcast::InitAsDefaultInstance() {
}

C2GS_BreakBackBroadcast::C2GS_BreakBackBroadcast(const C2GS_BreakBackBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_BreakBackBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_BreakBackBroadcast::~C2GS_BreakBackBroadcast() {
  SharedDtor();
}

void C2GS_BreakBackBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_BreakBackBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_BreakBackBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_BreakBackBroadcast_descriptor_;
}

const C2GS_BreakBackBroadcast& C2GS_BreakBackBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_BreakBackBroadcast* C2GS_BreakBackBroadcast::default_instance_ = NULL;

C2GS_BreakBackBroadcast* C2GS_BreakBackBroadcast::New() const {
  return new C2GS_BreakBackBroadcast;
}

void C2GS_BreakBackBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_BreakBackBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_BreakBackBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_BreakBackBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_BreakBackBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_BreakBackBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_BreakBackBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_BreakBackBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_BreakBackBroadcast::MergeFrom(const C2GS_BreakBackBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_BreakBackBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_BreakBackBroadcast::CopyFrom(const C2GS_BreakBackBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_BreakBackBroadcast::IsInitialized() const {

  return true;
}

void C2GS_BreakBackBroadcast::Swap(C2GS_BreakBackBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_BreakBackBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_BreakBackBroadcast_descriptor_;
  metadata.reflection = C2GS_BreakBackBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_BreakBackBroadcast::kErrorcodeFieldNumber;
const int GS2C_BreakBackBroadcast::kBreakUidFieldNumber;
#endif  // !_MSC_VER

GS2C_BreakBackBroadcast::GS2C_BreakBackBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_BreakBackBroadcast::InitAsDefaultInstance() {
}

GS2C_BreakBackBroadcast::GS2C_BreakBackBroadcast(const GS2C_BreakBackBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_BreakBackBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  break_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_BreakBackBroadcast::~GS2C_BreakBackBroadcast() {
  SharedDtor();
}

void GS2C_BreakBackBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_BreakBackBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_BreakBackBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_BreakBackBroadcast_descriptor_;
}

const GS2C_BreakBackBroadcast& GS2C_BreakBackBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_BreakBackBroadcast* GS2C_BreakBackBroadcast::default_instance_ = NULL;

GS2C_BreakBackBroadcast* GS2C_BreakBackBroadcast::New() const {
  return new GS2C_BreakBackBroadcast;
}

void GS2C_BreakBackBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    break_uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_BreakBackBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_break_uid;
        break;
      }

      // required int32 break_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_uid_)));
          set_has_break_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_BreakBackBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int32 break_uid = 2;
  if (has_break_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->break_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_BreakBackBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int32 break_uid = 2;
  if (has_break_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->break_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_BreakBackBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int32 break_uid = 2;
    if (has_break_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_BreakBackBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_BreakBackBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_BreakBackBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_BreakBackBroadcast::MergeFrom(const GS2C_BreakBackBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_break_uid()) {
      set_break_uid(from.break_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_BreakBackBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_BreakBackBroadcast::CopyFrom(const GS2C_BreakBackBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_BreakBackBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_BreakBackBroadcast::Swap(GS2C_BreakBackBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(break_uid_, other->break_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_BreakBackBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_BreakBackBroadcast_descriptor_;
  metadata.reflection = GS2C_BreakBackBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_LeaveTable::kLeaveReasonFieldNumber;
#endif  // !_MSC_VER

C2GS_LeaveTable::C2GS_LeaveTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_LeaveTable::InitAsDefaultInstance() {
}

C2GS_LeaveTable::C2GS_LeaveTable(const C2GS_LeaveTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_LeaveTable::SharedCtor() {
  _cached_size_ = 0;
  leave_reason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_LeaveTable::~C2GS_LeaveTable() {
  SharedDtor();
}

void C2GS_LeaveTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_LeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_LeaveTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_LeaveTable_descriptor_;
}

const C2GS_LeaveTable& C2GS_LeaveTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_LeaveTable* C2GS_LeaveTable::default_instance_ = NULL;

C2GS_LeaveTable* C2GS_LeaveTable::New() const {
  return new C2GS_LeaveTable;
}

void C2GS_LeaveTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    leave_reason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_LeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leave_reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_reason_)));
          set_has_leave_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_LeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 leave_reason = 1;
  if (has_leave_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leave_reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_LeaveTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 leave_reason = 1;
  if (has_leave_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leave_reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_LeaveTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 leave_reason = 1;
    if (has_leave_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_LeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_LeaveTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_LeaveTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_LeaveTable::MergeFrom(const C2GS_LeaveTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leave_reason()) {
      set_leave_reason(from.leave_reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_LeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_LeaveTable::CopyFrom(const C2GS_LeaveTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_LeaveTable::IsInitialized() const {

  return true;
}

void C2GS_LeaveTable::Swap(C2GS_LeaveTable* other) {
  if (other != this) {
    std::swap(leave_reason_, other->leave_reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_LeaveTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_LeaveTable_descriptor_;
  metadata.reflection = C2GS_LeaveTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LeaveTable::kErrorcodeFieldNumber;
const int GS2C_LeaveTable::kLeaveReasonFieldNumber;
const int GS2C_LeaveTable::kIsBankerNoDismissFieldNumber;
#endif  // !_MSC_VER

GS2C_LeaveTable::GS2C_LeaveTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LeaveTable::InitAsDefaultInstance() {
}

GS2C_LeaveTable::GS2C_LeaveTable(const GS2C_LeaveTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LeaveTable::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  leave_reason_ = 0;
  is_banker_no_dismiss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LeaveTable::~GS2C_LeaveTable() {
  SharedDtor();
}

void GS2C_LeaveTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LeaveTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LeaveTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LeaveTable_descriptor_;
}

const GS2C_LeaveTable& GS2C_LeaveTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_LeaveTable* GS2C_LeaveTable::default_instance_ = NULL;

GS2C_LeaveTable* GS2C_LeaveTable::New() const {
  return new GS2C_LeaveTable;
}

void GS2C_LeaveTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    leave_reason_ = 0;
    is_banker_no_dismiss_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LeaveTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leave_reason;
        break;
      }

      // optional int32 leave_reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_reason_)));
          set_has_leave_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_banker_no_dismiss;
        break;
      }

      // optional int32 is_banker_no_dismiss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_no_dismiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_banker_no_dismiss_)));
          set_has_is_banker_no_dismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LeaveTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 leave_reason = 2;
  if (has_leave_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leave_reason(), output);
  }

  // optional int32 is_banker_no_dismiss = 3;
  if (has_is_banker_no_dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_banker_no_dismiss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LeaveTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 leave_reason = 2;
  if (has_leave_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leave_reason(), target);
  }

  // optional int32 is_banker_no_dismiss = 3;
  if (has_is_banker_no_dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_banker_no_dismiss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LeaveTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 leave_reason = 2;
    if (has_leave_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_reason());
    }

    // optional int32 is_banker_no_dismiss = 3;
    if (has_is_banker_no_dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_banker_no_dismiss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LeaveTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LeaveTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LeaveTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LeaveTable::MergeFrom(const GS2C_LeaveTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_leave_reason()) {
      set_leave_reason(from.leave_reason());
    }
    if (from.has_is_banker_no_dismiss()) {
      set_is_banker_no_dismiss(from.is_banker_no_dismiss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LeaveTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LeaveTable::CopyFrom(const GS2C_LeaveTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LeaveTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_LeaveTable::Swap(GS2C_LeaveTable* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(leave_reason_, other->leave_reason_);
    std::swap(is_banker_no_dismiss_, other->is_banker_no_dismiss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LeaveTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LeaveTable_descriptor_;
  metadata.reflection = GS2C_LeaveTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_LeaveTableBroadcast::C2GS_LeaveTableBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_LeaveTableBroadcast::InitAsDefaultInstance() {
}

C2GS_LeaveTableBroadcast::C2GS_LeaveTableBroadcast(const C2GS_LeaveTableBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_LeaveTableBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_LeaveTableBroadcast::~C2GS_LeaveTableBroadcast() {
  SharedDtor();
}

void C2GS_LeaveTableBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_LeaveTableBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_LeaveTableBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_LeaveTableBroadcast_descriptor_;
}

const C2GS_LeaveTableBroadcast& C2GS_LeaveTableBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_LeaveTableBroadcast* C2GS_LeaveTableBroadcast::default_instance_ = NULL;

C2GS_LeaveTableBroadcast* C2GS_LeaveTableBroadcast::New() const {
  return new C2GS_LeaveTableBroadcast;
}

void C2GS_LeaveTableBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_LeaveTableBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_LeaveTableBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_LeaveTableBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_LeaveTableBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_LeaveTableBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_LeaveTableBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_LeaveTableBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_LeaveTableBroadcast::MergeFrom(const C2GS_LeaveTableBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_LeaveTableBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_LeaveTableBroadcast::CopyFrom(const C2GS_LeaveTableBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_LeaveTableBroadcast::IsInitialized() const {

  return true;
}

void C2GS_LeaveTableBroadcast::Swap(C2GS_LeaveTableBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_LeaveTableBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_LeaveTableBroadcast_descriptor_;
  metadata.reflection = C2GS_LeaveTableBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_LeaveTableBroadcast::kErrorcodeFieldNumber;
const int GS2C_LeaveTableBroadcast::kUidFieldNumber;
const int GS2C_LeaveTableBroadcast::kLeaveReasonFieldNumber;
const int GS2C_LeaveTableBroadcast::kIsBankerNoDismissFieldNumber;
#endif  // !_MSC_VER

GS2C_LeaveTableBroadcast::GS2C_LeaveTableBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_LeaveTableBroadcast::InitAsDefaultInstance() {
}

GS2C_LeaveTableBroadcast::GS2C_LeaveTableBroadcast(const GS2C_LeaveTableBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_LeaveTableBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  leave_reason_ = 0;
  is_banker_no_dismiss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_LeaveTableBroadcast::~GS2C_LeaveTableBroadcast() {
  SharedDtor();
}

void GS2C_LeaveTableBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_LeaveTableBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_LeaveTableBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_LeaveTableBroadcast_descriptor_;
}

const GS2C_LeaveTableBroadcast& GS2C_LeaveTableBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_LeaveTableBroadcast* GS2C_LeaveTableBroadcast::default_instance_ = NULL;

GS2C_LeaveTableBroadcast* GS2C_LeaveTableBroadcast::New() const {
  return new GS2C_LeaveTableBroadcast;
}

void GS2C_LeaveTableBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    leave_reason_ = 0;
    is_banker_no_dismiss_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_LeaveTableBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leave_reason;
        break;
      }

      // optional int32 leave_reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leave_reason_)));
          set_has_leave_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_banker_no_dismiss;
        break;
      }

      // optional int32 is_banker_no_dismiss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_banker_no_dismiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_banker_no_dismiss_)));
          set_has_is_banker_no_dismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_LeaveTableBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int32 leave_reason = 3;
  if (has_leave_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leave_reason(), output);
  }

  // optional int32 is_banker_no_dismiss = 4;
  if (has_is_banker_no_dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_banker_no_dismiss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_LeaveTableBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int32 leave_reason = 3;
  if (has_leave_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leave_reason(), target);
  }

  // optional int32 is_banker_no_dismiss = 4;
  if (has_is_banker_no_dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_banker_no_dismiss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_LeaveTableBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 leave_reason = 3;
    if (has_leave_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leave_reason());
    }

    // optional int32 is_banker_no_dismiss = 4;
    if (has_is_banker_no_dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_banker_no_dismiss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_LeaveTableBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_LeaveTableBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_LeaveTableBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_LeaveTableBroadcast::MergeFrom(const GS2C_LeaveTableBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_leave_reason()) {
      set_leave_reason(from.leave_reason());
    }
    if (from.has_is_banker_no_dismiss()) {
      set_is_banker_no_dismiss(from.is_banker_no_dismiss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_LeaveTableBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_LeaveTableBroadcast::CopyFrom(const GS2C_LeaveTableBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_LeaveTableBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_LeaveTableBroadcast::Swap(GS2C_LeaveTableBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(leave_reason_, other->leave_reason_);
    std::swap(is_banker_no_dismiss_, other->is_banker_no_dismiss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_LeaveTableBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_LeaveTableBroadcast_descriptor_;
  metadata.reflection = GS2C_LeaveTableBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_BreakBroadcast::C2GS_BreakBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_BreakBroadcast::InitAsDefaultInstance() {
}

C2GS_BreakBroadcast::C2GS_BreakBroadcast(const C2GS_BreakBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_BreakBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_BreakBroadcast::~C2GS_BreakBroadcast() {
  SharedDtor();
}

void C2GS_BreakBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_BreakBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_BreakBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_BreakBroadcast_descriptor_;
}

const C2GS_BreakBroadcast& C2GS_BreakBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_BreakBroadcast* C2GS_BreakBroadcast::default_instance_ = NULL;

C2GS_BreakBroadcast* C2GS_BreakBroadcast::New() const {
  return new C2GS_BreakBroadcast;
}

void C2GS_BreakBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_BreakBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_BreakBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_BreakBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_BreakBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_BreakBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_BreakBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_BreakBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_BreakBroadcast::MergeFrom(const C2GS_BreakBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_BreakBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_BreakBroadcast::CopyFrom(const C2GS_BreakBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_BreakBroadcast::IsInitialized() const {

  return true;
}

void C2GS_BreakBroadcast::Swap(C2GS_BreakBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_BreakBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_BreakBroadcast_descriptor_;
  metadata.reflection = C2GS_BreakBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_BreakBroadcast::kErrorcodeFieldNumber;
const int GS2C_BreakBroadcast::kUidFieldNumber;
#endif  // !_MSC_VER

GS2C_BreakBroadcast::GS2C_BreakBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_BreakBroadcast::InitAsDefaultInstance() {
}

GS2C_BreakBroadcast::GS2C_BreakBroadcast(const GS2C_BreakBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_BreakBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_BreakBroadcast::~GS2C_BreakBroadcast() {
  SharedDtor();
}

void GS2C_BreakBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_BreakBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_BreakBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_BreakBroadcast_descriptor_;
}

const GS2C_BreakBroadcast& GS2C_BreakBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_BreakBroadcast* GS2C_BreakBroadcast::default_instance_ = NULL;

GS2C_BreakBroadcast* GS2C_BreakBroadcast::New() const {
  return new GS2C_BreakBroadcast;
}

void GS2C_BreakBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_BreakBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_BreakBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_BreakBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_BreakBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_BreakBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_BreakBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_BreakBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_BreakBroadcast::MergeFrom(const GS2C_BreakBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_BreakBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_BreakBroadcast::CopyFrom(const GS2C_BreakBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_BreakBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_BreakBroadcast::Swap(GS2C_BreakBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_BreakBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_BreakBroadcast_descriptor_;
  metadata.reflection = GS2C_BreakBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_StartReplaceBroadcast::C2GS_StartReplaceBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_StartReplaceBroadcast::InitAsDefaultInstance() {
}

C2GS_StartReplaceBroadcast::C2GS_StartReplaceBroadcast(const C2GS_StartReplaceBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_StartReplaceBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_StartReplaceBroadcast::~C2GS_StartReplaceBroadcast() {
  SharedDtor();
}

void C2GS_StartReplaceBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_StartReplaceBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_StartReplaceBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_StartReplaceBroadcast_descriptor_;
}

const C2GS_StartReplaceBroadcast& C2GS_StartReplaceBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_StartReplaceBroadcast* C2GS_StartReplaceBroadcast::default_instance_ = NULL;

C2GS_StartReplaceBroadcast* C2GS_StartReplaceBroadcast::New() const {
  return new C2GS_StartReplaceBroadcast;
}

void C2GS_StartReplaceBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_StartReplaceBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_StartReplaceBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_StartReplaceBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_StartReplaceBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_StartReplaceBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_StartReplaceBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_StartReplaceBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_StartReplaceBroadcast::MergeFrom(const C2GS_StartReplaceBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_StartReplaceBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_StartReplaceBroadcast::CopyFrom(const C2GS_StartReplaceBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_StartReplaceBroadcast::IsInitialized() const {

  return true;
}

void C2GS_StartReplaceBroadcast::Swap(C2GS_StartReplaceBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_StartReplaceBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_StartReplaceBroadcast_descriptor_;
  metadata.reflection = C2GS_StartReplaceBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_StartReplaceBroadcast::kErrorcodeFieldNumber;
const int GS2C_StartReplaceBroadcast::kReplaceUidsFieldNumber;
const int GS2C_StartReplaceBroadcast::kCardCntRealsFieldNumber;
#endif  // !_MSC_VER

GS2C_StartReplaceBroadcast::GS2C_StartReplaceBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_StartReplaceBroadcast::InitAsDefaultInstance() {
}

GS2C_StartReplaceBroadcast::GS2C_StartReplaceBroadcast(const GS2C_StartReplaceBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_StartReplaceBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_StartReplaceBroadcast::~GS2C_StartReplaceBroadcast() {
  SharedDtor();
}

void GS2C_StartReplaceBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_StartReplaceBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_StartReplaceBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_StartReplaceBroadcast_descriptor_;
}

const GS2C_StartReplaceBroadcast& GS2C_StartReplaceBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_StartReplaceBroadcast* GS2C_StartReplaceBroadcast::default_instance_ = NULL;

GS2C_StartReplaceBroadcast* GS2C_StartReplaceBroadcast::New() const {
  return new GS2C_StartReplaceBroadcast;
}

void GS2C_StartReplaceBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  replace_uids_.Clear();
  card_cnt_reals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_StartReplaceBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replace_uids;
        break;
      }

      // repeated int32 replace_uids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replace_uids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_replace_uids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_replace_uids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replace_uids;
        if (input->ExpectTag(24)) goto parse_card_cnt_reals;
        break;
      }

      // repeated int32 card_cnt_reals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_cnt_reals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_card_cnt_reals())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_cnt_reals())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_cnt_reals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_StartReplaceBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // repeated int32 replace_uids = 2;
  for (int i = 0; i < this->replace_uids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->replace_uids(i), output);
  }

  // repeated int32 card_cnt_reals = 3;
  for (int i = 0; i < this->card_cnt_reals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->card_cnt_reals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_StartReplaceBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // repeated int32 replace_uids = 2;
  for (int i = 0; i < this->replace_uids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->replace_uids(i), target);
  }

  // repeated int32 card_cnt_reals = 3;
  for (int i = 0; i < this->card_cnt_reals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->card_cnt_reals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_StartReplaceBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated int32 replace_uids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->replace_uids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->replace_uids(i));
    }
    total_size += 1 * this->replace_uids_size() + data_size;
  }

  // repeated int32 card_cnt_reals = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_cnt_reals_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_cnt_reals(i));
    }
    total_size += 1 * this->card_cnt_reals_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_StartReplaceBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_StartReplaceBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_StartReplaceBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_StartReplaceBroadcast::MergeFrom(const GS2C_StartReplaceBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  replace_uids_.MergeFrom(from.replace_uids_);
  card_cnt_reals_.MergeFrom(from.card_cnt_reals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_StartReplaceBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_StartReplaceBroadcast::CopyFrom(const GS2C_StartReplaceBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_StartReplaceBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_StartReplaceBroadcast::Swap(GS2C_StartReplaceBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    replace_uids_.Swap(&other->replace_uids_);
    card_cnt_reals_.Swap(&other->card_cnt_reals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_StartReplaceBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_StartReplaceBroadcast_descriptor_;
  metadata.reflection = GS2C_StartReplaceBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_RoundStartBroadcast::C2GS_RoundStartBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_RoundStartBroadcast::InitAsDefaultInstance() {
}

C2GS_RoundStartBroadcast::C2GS_RoundStartBroadcast(const C2GS_RoundStartBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_RoundStartBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_RoundStartBroadcast::~C2GS_RoundStartBroadcast() {
  SharedDtor();
}

void C2GS_RoundStartBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_RoundStartBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_RoundStartBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_RoundStartBroadcast_descriptor_;
}

const C2GS_RoundStartBroadcast& C2GS_RoundStartBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_RoundStartBroadcast* C2GS_RoundStartBroadcast::default_instance_ = NULL;

C2GS_RoundStartBroadcast* C2GS_RoundStartBroadcast::New() const {
  return new C2GS_RoundStartBroadcast;
}

void C2GS_RoundStartBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_RoundStartBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_RoundStartBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_RoundStartBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_RoundStartBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_RoundStartBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_RoundStartBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_RoundStartBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_RoundStartBroadcast::MergeFrom(const C2GS_RoundStartBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_RoundStartBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_RoundStartBroadcast::CopyFrom(const C2GS_RoundStartBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_RoundStartBroadcast::IsInitialized() const {

  return true;
}

void C2GS_RoundStartBroadcast::Swap(C2GS_RoundStartBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_RoundStartBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_RoundStartBroadcast_descriptor_;
  metadata.reflection = C2GS_RoundStartBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_RoundStartBroadcast::kErrorcodeFieldNumber;
const int GS2C_RoundStartBroadcast::kLeftRoundFieldNumber;
const int GS2C_RoundStartBroadcast::kLeftCntFieldNumber;
const int GS2C_RoundStartBroadcast::kGoldNowFieldNumber;
const int GS2C_RoundStartBroadcast::kBankerUidFieldNumber;
const int GS2C_RoundStartBroadcast::kHandCardsFieldNumber;
#endif  // !_MSC_VER

GS2C_RoundStartBroadcast::GS2C_RoundStartBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_RoundStartBroadcast::InitAsDefaultInstance() {
}

GS2C_RoundStartBroadcast::GS2C_RoundStartBroadcast(const GS2C_RoundStartBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_RoundStartBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  left_round_ = 0;
  left_cnt_ = 0;
  gold_now_ = 0;
  banker_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_RoundStartBroadcast::~GS2C_RoundStartBroadcast() {
  SharedDtor();
}

void GS2C_RoundStartBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_RoundStartBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_RoundStartBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_RoundStartBroadcast_descriptor_;
}

const GS2C_RoundStartBroadcast& GS2C_RoundStartBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_RoundStartBroadcast* GS2C_RoundStartBroadcast::default_instance_ = NULL;

GS2C_RoundStartBroadcast* GS2C_RoundStartBroadcast::New() const {
  return new GS2C_RoundStartBroadcast;
}

void GS2C_RoundStartBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    left_round_ = 0;
    left_cnt_ = 0;
    gold_now_ = 0;
    banker_uid_ = 0;
  }
  hand_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_RoundStartBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_left_round;
        break;
      }

      // optional int32 left_round = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_round_)));
          set_has_left_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_cnt;
        break;
      }

      // optional int32 left_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_cnt_)));
          set_has_left_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold_now;
        break;
      }

      // optional int32 gold_now = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_now_)));
          set_has_gold_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_banker_uid;
        break;
      }

      // optional int32 banker_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_banker_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banker_uid_)));
          set_has_banker_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hand_cards;
        break;
      }

      // repeated int32 hand_cards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_hand_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hand_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hand_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_RoundStartBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 left_round = 2;
  if (has_left_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_round(), output);
  }

  // optional int32 left_cnt = 3;
  if (has_left_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_cnt(), output);
  }

  // optional int32 gold_now = 4;
  if (has_gold_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold_now(), output);
  }

  // optional int32 banker_uid = 5;
  if (has_banker_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->banker_uid(), output);
  }

  // repeated int32 hand_cards = 6;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->hand_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_RoundStartBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 left_round = 2;
  if (has_left_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_round(), target);
  }

  // optional int32 left_cnt = 3;
  if (has_left_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_cnt(), target);
  }

  // optional int32 gold_now = 4;
  if (has_gold_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold_now(), target);
  }

  // optional int32 banker_uid = 5;
  if (has_banker_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->banker_uid(), target);
  }

  // repeated int32 hand_cards = 6;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->hand_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_RoundStartBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 left_round = 2;
    if (has_left_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_round());
    }

    // optional int32 left_cnt = 3;
    if (has_left_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_cnt());
    }

    // optional int32 gold_now = 4;
    if (has_gold_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_now());
    }

    // optional int32 banker_uid = 5;
    if (has_banker_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banker_uid());
    }

  }
  // repeated int32 hand_cards = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hand_cards(i));
    }
    total_size += 1 * this->hand_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_RoundStartBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_RoundStartBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_RoundStartBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_RoundStartBroadcast::MergeFrom(const GS2C_RoundStartBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_left_round()) {
      set_left_round(from.left_round());
    }
    if (from.has_left_cnt()) {
      set_left_cnt(from.left_cnt());
    }
    if (from.has_gold_now()) {
      set_gold_now(from.gold_now());
    }
    if (from.has_banker_uid()) {
      set_banker_uid(from.banker_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_RoundStartBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_RoundStartBroadcast::CopyFrom(const GS2C_RoundStartBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_RoundStartBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_RoundStartBroadcast::Swap(GS2C_RoundStartBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(left_round_, other->left_round_);
    std::swap(left_cnt_, other->left_cnt_);
    std::swap(gold_now_, other->gold_now_);
    std::swap(banker_uid_, other->banker_uid_);
    hand_cards_.Swap(&other->hand_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_RoundStartBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_RoundStartBroadcast_descriptor_;
  metadata.reflection = GS2C_RoundStartBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_DispatchBroadcast::C2GS_DispatchBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_DispatchBroadcast::InitAsDefaultInstance() {
}

C2GS_DispatchBroadcast::C2GS_DispatchBroadcast(const C2GS_DispatchBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_DispatchBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_DispatchBroadcast::~C2GS_DispatchBroadcast() {
  SharedDtor();
}

void C2GS_DispatchBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_DispatchBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_DispatchBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_DispatchBroadcast_descriptor_;
}

const C2GS_DispatchBroadcast& C2GS_DispatchBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_DispatchBroadcast* C2GS_DispatchBroadcast::default_instance_ = NULL;

C2GS_DispatchBroadcast* C2GS_DispatchBroadcast::New() const {
  return new C2GS_DispatchBroadcast;
}

void C2GS_DispatchBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_DispatchBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_DispatchBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_DispatchBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_DispatchBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_DispatchBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_DispatchBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_DispatchBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_DispatchBroadcast::MergeFrom(const C2GS_DispatchBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_DispatchBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_DispatchBroadcast::CopyFrom(const C2GS_DispatchBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_DispatchBroadcast::IsInitialized() const {

  return true;
}

void C2GS_DispatchBroadcast::Swap(C2GS_DispatchBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_DispatchBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_DispatchBroadcast_descriptor_;
  metadata.reflection = C2GS_DispatchBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DispatchBroadcast::kErrorcodeFieldNumber;
const int GS2C_DispatchBroadcast::kCardFieldNumber;
const int GS2C_DispatchBroadcast::kDispatchUidFieldNumber;
const int GS2C_DispatchBroadcast::kLeftCntFieldNumber;
const int GS2C_DispatchBroadcast::kIsHuFieldNumber;
const int GS2C_DispatchBroadcast::kIsGangFieldNumber;
#endif  // !_MSC_VER

GS2C_DispatchBroadcast::GS2C_DispatchBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DispatchBroadcast::InitAsDefaultInstance() {
}

GS2C_DispatchBroadcast::GS2C_DispatchBroadcast(const GS2C_DispatchBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DispatchBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  card_ = 0;
  dispatch_uid_ = 0;
  left_cnt_ = 0;
  is_hu_ = 0;
  is_gang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DispatchBroadcast::~GS2C_DispatchBroadcast() {
  SharedDtor();
}

void GS2C_DispatchBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DispatchBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DispatchBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DispatchBroadcast_descriptor_;
}

const GS2C_DispatchBroadcast& GS2C_DispatchBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_DispatchBroadcast* GS2C_DispatchBroadcast::default_instance_ = NULL;

GS2C_DispatchBroadcast* GS2C_DispatchBroadcast::New() const {
  return new GS2C_DispatchBroadcast;
}

void GS2C_DispatchBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    card_ = 0;
    dispatch_uid_ = 0;
    left_cnt_ = 0;
    is_hu_ = 0;
    is_gang_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DispatchBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card;
        break;
      }

      // optional int32 card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dispatch_uid;
        break;
      }

      // optional int32 dispatch_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dispatch_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispatch_uid_)));
          set_has_dispatch_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_left_cnt;
        break;
      }

      // optional int32 left_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_cnt_)));
          set_has_left_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_hu;
        break;
      }

      // optional int32 is_hu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_hu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_hu_)));
          set_has_is_hu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_gang;
        break;
      }

      // optional int32 is_gang = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_gang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_gang_)));
          set_has_is_gang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DispatchBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 card = 2;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->card(), output);
  }

  // optional int32 dispatch_uid = 4;
  if (has_dispatch_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dispatch_uid(), output);
  }

  // optional int32 left_cnt = 5;
  if (has_left_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_cnt(), output);
  }

  // optional int32 is_hu = 6;
  if (has_is_hu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_hu(), output);
  }

  // optional int32 is_gang = 7;
  if (has_is_gang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_gang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DispatchBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 card = 2;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->card(), target);
  }

  // optional int32 dispatch_uid = 4;
  if (has_dispatch_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dispatch_uid(), target);
  }

  // optional int32 left_cnt = 5;
  if (has_left_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_cnt(), target);
  }

  // optional int32 is_hu = 6;
  if (has_is_hu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_hu(), target);
  }

  // optional int32 is_gang = 7;
  if (has_is_gang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_gang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DispatchBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 card = 2;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

    // optional int32 dispatch_uid = 4;
    if (has_dispatch_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispatch_uid());
    }

    // optional int32 left_cnt = 5;
    if (has_left_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_cnt());
    }

    // optional int32 is_hu = 6;
    if (has_is_hu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_hu());
    }

    // optional int32 is_gang = 7;
    if (has_is_gang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_gang());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DispatchBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DispatchBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DispatchBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DispatchBroadcast::MergeFrom(const GS2C_DispatchBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
    if (from.has_dispatch_uid()) {
      set_dispatch_uid(from.dispatch_uid());
    }
    if (from.has_left_cnt()) {
      set_left_cnt(from.left_cnt());
    }
    if (from.has_is_hu()) {
      set_is_hu(from.is_hu());
    }
    if (from.has_is_gang()) {
      set_is_gang(from.is_gang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DispatchBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DispatchBroadcast::CopyFrom(const GS2C_DispatchBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DispatchBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_DispatchBroadcast::Swap(GS2C_DispatchBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(card_, other->card_);
    std::swap(dispatch_uid_, other->dispatch_uid_);
    std::swap(left_cnt_, other->left_cnt_);
    std::swap(is_hu_, other->is_hu_);
    std::swap(is_gang_, other->is_gang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DispatchBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DispatchBroadcast_descriptor_;
  metadata.reflection = GS2C_DispatchBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Out::kCardFieldNumber;
#endif  // !_MSC_VER

C2GS_Out::C2GS_Out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Out::InitAsDefaultInstance() {
}

C2GS_Out::C2GS_Out(const C2GS_Out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Out::SharedCtor() {
  _cached_size_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Out::~C2GS_Out() {
  SharedDtor();
}

void C2GS_Out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Out_descriptor_;
}

const C2GS_Out& C2GS_Out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Out* C2GS_Out::default_instance_ = NULL;

C2GS_Out* C2GS_Out::New() const {
  return new C2GS_Out;
}

void C2GS_Out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 card = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 card = 1;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 card = 1;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Out::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 card = 1;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Out::MergeFrom(const C2GS_Out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Out::CopyFrom(const C2GS_Out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Out::Swap(C2GS_Out* other) {
  if (other != this) {
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Out_descriptor_;
  metadata.reflection = C2GS_Out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Out::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Out::GS2C_Out()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Out::InitAsDefaultInstance() {
}

GS2C_Out::GS2C_Out(const GS2C_Out& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Out::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Out::~GS2C_Out() {
  SharedDtor();
}

void GS2C_Out::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Out::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Out::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Out_descriptor_;
}

const GS2C_Out& GS2C_Out::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Out* GS2C_Out::default_instance_ = NULL;

GS2C_Out* GS2C_Out::New() const {
  return new GS2C_Out;
}

void GS2C_Out::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Out::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Out::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Out::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Out::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Out::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Out* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Out*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Out::MergeFrom(const GS2C_Out& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Out::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Out::CopyFrom(const GS2C_Out& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Out::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Out::Swap(GS2C_Out* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Out::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Out_descriptor_;
  metadata.reflection = GS2C_Out_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_OutBroadcast::C2GS_OutBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_OutBroadcast::InitAsDefaultInstance() {
}

C2GS_OutBroadcast::C2GS_OutBroadcast(const C2GS_OutBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_OutBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_OutBroadcast::~C2GS_OutBroadcast() {
  SharedDtor();
}

void C2GS_OutBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_OutBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_OutBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_OutBroadcast_descriptor_;
}

const C2GS_OutBroadcast& C2GS_OutBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_OutBroadcast* C2GS_OutBroadcast::default_instance_ = NULL;

C2GS_OutBroadcast* C2GS_OutBroadcast::New() const {
  return new C2GS_OutBroadcast;
}

void C2GS_OutBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_OutBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_OutBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_OutBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_OutBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_OutBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_OutBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_OutBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_OutBroadcast::MergeFrom(const C2GS_OutBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_OutBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_OutBroadcast::CopyFrom(const C2GS_OutBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_OutBroadcast::IsInitialized() const {

  return true;
}

void C2GS_OutBroadcast::Swap(C2GS_OutBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_OutBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_OutBroadcast_descriptor_;
  metadata.reflection = C2GS_OutBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_OutBroadcast::kErrorcodeFieldNumber;
const int GS2C_OutBroadcast::kOutUidFieldNumber;
const int GS2C_OutBroadcast::kCardFieldNumber;
#endif  // !_MSC_VER

GS2C_OutBroadcast::GS2C_OutBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_OutBroadcast::InitAsDefaultInstance() {
}

GS2C_OutBroadcast::GS2C_OutBroadcast(const GS2C_OutBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_OutBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  out_uid_ = 0;
  card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_OutBroadcast::~GS2C_OutBroadcast() {
  SharedDtor();
}

void GS2C_OutBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_OutBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_OutBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_OutBroadcast_descriptor_;
}

const GS2C_OutBroadcast& GS2C_OutBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_OutBroadcast* GS2C_OutBroadcast::default_instance_ = NULL;

GS2C_OutBroadcast* GS2C_OutBroadcast::New() const {
  return new GS2C_OutBroadcast;
}

void GS2C_OutBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    out_uid_ = 0;
    card_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_OutBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_uid;
        break;
      }

      // optional int32 out_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_uid_)));
          set_has_out_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card;
        break;
      }

      // optional int32 card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
          set_has_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_OutBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 out_uid = 2;
  if (has_out_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_uid(), output);
  }

  // optional int32 card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->card(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_OutBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 out_uid = 2;
  if (has_out_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_uid(), target);
  }

  // optional int32 card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->card(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_OutBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 out_uid = 2;
    if (has_out_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_uid());
    }

    // optional int32 card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->card());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_OutBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_OutBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_OutBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_OutBroadcast::MergeFrom(const GS2C_OutBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_out_uid()) {
      set_out_uid(from.out_uid());
    }
    if (from.has_card()) {
      set_card(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_OutBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_OutBroadcast::CopyFrom(const GS2C_OutBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_OutBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_OutBroadcast::Swap(GS2C_OutBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(out_uid_, other->out_uid_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_OutBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_OutBroadcast_descriptor_;
  metadata.reflection = GS2C_OutBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_OperateAskBroadcast::C2GS_OperateAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_OperateAskBroadcast::InitAsDefaultInstance() {
}

C2GS_OperateAskBroadcast::C2GS_OperateAskBroadcast(const C2GS_OperateAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_OperateAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_OperateAskBroadcast::~C2GS_OperateAskBroadcast() {
  SharedDtor();
}

void C2GS_OperateAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_OperateAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_OperateAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_OperateAskBroadcast_descriptor_;
}

const C2GS_OperateAskBroadcast& C2GS_OperateAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_OperateAskBroadcast* C2GS_OperateAskBroadcast::default_instance_ = NULL;

C2GS_OperateAskBroadcast* C2GS_OperateAskBroadcast::New() const {
  return new C2GS_OperateAskBroadcast;
}

void C2GS_OperateAskBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_OperateAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_OperateAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_OperateAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_OperateAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_OperateAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_OperateAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_OperateAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_OperateAskBroadcast::MergeFrom(const C2GS_OperateAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_OperateAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_OperateAskBroadcast::CopyFrom(const C2GS_OperateAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_OperateAskBroadcast::IsInitialized() const {

  return true;
}

void C2GS_OperateAskBroadcast::Swap(C2GS_OperateAskBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_OperateAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_OperateAskBroadcast_descriptor_;
  metadata.reflection = C2GS_OperateAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_OperateAskBroadcast::kErrorcodeFieldNumber;
const int GS2C_OperateAskBroadcast::kResumeUidFieldNumber;
const int GS2C_OperateAskBroadcast::kActionCardFieldNumber;
const int GS2C_OperateAskBroadcast::kActionsFieldNumber;
const int GS2C_OperateAskBroadcast::kGangCardsFieldNumber;
#endif  // !_MSC_VER

GS2C_OperateAskBroadcast::GS2C_OperateAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_OperateAskBroadcast::InitAsDefaultInstance() {
}

GS2C_OperateAskBroadcast::GS2C_OperateAskBroadcast(const GS2C_OperateAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_OperateAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  resume_uid_ = 0;
  action_card_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_OperateAskBroadcast::~GS2C_OperateAskBroadcast() {
  SharedDtor();
}

void GS2C_OperateAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_OperateAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_OperateAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_OperateAskBroadcast_descriptor_;
}

const GS2C_OperateAskBroadcast& GS2C_OperateAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_OperateAskBroadcast* GS2C_OperateAskBroadcast::default_instance_ = NULL;

GS2C_OperateAskBroadcast* GS2C_OperateAskBroadcast::New() const {
  return new GS2C_OperateAskBroadcast;
}

void GS2C_OperateAskBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    resume_uid_ = 0;
    action_card_ = 0;
  }
  actions_.Clear();
  gang_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_OperateAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resume_uid;
        break;
      }

      // optional int32 resume_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resume_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resume_uid_)));
          set_has_resume_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action_card;
        break;
      }

      // optional int32 action_card = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_card_)));
          set_has_action_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_actions;
        break;
      }

      // repeated int32 actions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_actions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_actions;
        if (input->ExpectTag(40)) goto parse_gang_cards;
        break;
      }

      // repeated int32 gang_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gang_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_gang_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gang_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gang_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_OperateAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 resume_uid = 2;
  if (has_resume_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resume_uid(), output);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action_card(), output);
  }

  // repeated int32 actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->actions(i), output);
  }

  // repeated int32 gang_cards = 5;
  for (int i = 0; i < this->gang_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->gang_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_OperateAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 resume_uid = 2;
  if (has_resume_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resume_uid(), target);
  }

  // optional int32 action_card = 3;
  if (has_action_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action_card(), target);
  }

  // repeated int32 actions = 4;
  for (int i = 0; i < this->actions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->actions(i), target);
  }

  // repeated int32 gang_cards = 5;
  for (int i = 0; i < this->gang_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->gang_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_OperateAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 resume_uid = 2;
    if (has_resume_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resume_uid());
    }

    // optional int32 action_card = 3;
    if (has_action_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_card());
    }

  }
  // repeated int32 actions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->actions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actions(i));
    }
    total_size += 1 * this->actions_size() + data_size;
  }

  // repeated int32 gang_cards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->gang_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gang_cards(i));
    }
    total_size += 1 * this->gang_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_OperateAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_OperateAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_OperateAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_OperateAskBroadcast::MergeFrom(const GS2C_OperateAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  actions_.MergeFrom(from.actions_);
  gang_cards_.MergeFrom(from.gang_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_resume_uid()) {
      set_resume_uid(from.resume_uid());
    }
    if (from.has_action_card()) {
      set_action_card(from.action_card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_OperateAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_OperateAskBroadcast::CopyFrom(const GS2C_OperateAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_OperateAskBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_OperateAskBroadcast::Swap(GS2C_OperateAskBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(resume_uid_, other->resume_uid_);
    std::swap(action_card_, other->action_card_);
    actions_.Swap(&other->actions_);
    gang_cards_.Swap(&other->gang_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_OperateAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_OperateAskBroadcast_descriptor_;
  metadata.reflection = GS2C_OperateAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Operate::kOperateCodeFieldNumber;
const int C2GS_Operate::kOperateCardsFieldNumber;
#endif  // !_MSC_VER

C2GS_Operate::C2GS_Operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Operate::InitAsDefaultInstance() {
}

C2GS_Operate::C2GS_Operate(const C2GS_Operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Operate::SharedCtor() {
  _cached_size_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Operate::~C2GS_Operate() {
  SharedDtor();
}

void C2GS_Operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Operate_descriptor_;
}

const C2GS_Operate& C2GS_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Operate* C2GS_Operate::default_instance_ = NULL;

C2GS_Operate* C2GS_Operate::New() const {
  return new C2GS_Operate;
}

void C2GS_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    operate_code_ = 0;
  }
  operate_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 operate_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_code_)));
          set_has_operate_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_cards;
        break;
      }

      // repeated int32 operate_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_operate_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_operate_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 operate_code = 1;
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->operate_code(), output);
  }

  // repeated int32 operate_cards = 2;
  for (int i = 0; i < this->operate_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->operate_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 operate_code = 1;
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->operate_code(), target);
  }

  // repeated int32 operate_cards = 2;
  for (int i = 0; i < this->operate_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->operate_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 operate_code = 1;
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_code());
    }

  }
  // repeated int32 operate_cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->operate_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->operate_cards(i));
    }
    total_size += 1 * this->operate_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Operate::MergeFrom(const C2GS_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  operate_cards_.MergeFrom(from.operate_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Operate::CopyFrom(const C2GS_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_Operate::Swap(C2GS_Operate* other) {
  if (other != this) {
    std::swap(operate_code_, other->operate_code_);
    operate_cards_.Swap(&other->operate_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Operate_descriptor_;
  metadata.reflection = C2GS_Operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Operate::kErrorcodeFieldNumber;
const int GS2C_Operate::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Operate::GS2C_Operate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Operate::InitAsDefaultInstance() {
}

GS2C_Operate::GS2C_Operate(const GS2C_Operate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Operate::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Operate::~GS2C_Operate() {
  SharedDtor();
}

void GS2C_Operate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Operate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Operate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Operate_descriptor_;
}

const GS2C_Operate& GS2C_Operate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Operate* GS2C_Operate::default_instance_ = NULL;

GS2C_Operate* GS2C_Operate::New() const {
  return new GS2C_Operate;
}

void GS2C_Operate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Operate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_code;
        break;
      }

      // optional int32 operate_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_code_)));
          set_has_operate_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Operate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 operate_code = 2;
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Operate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 operate_code = 2;
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Operate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 operate_code = 2;
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Operate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Operate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Operate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Operate::MergeFrom(const GS2C_Operate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Operate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Operate::CopyFrom(const GS2C_Operate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Operate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Operate::Swap(GS2C_Operate* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Operate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Operate_descriptor_;
  metadata.reflection = GS2C_Operate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_OperateResultBroadcast::C2GS_OperateResultBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_OperateResultBroadcast::InitAsDefaultInstance() {
}

C2GS_OperateResultBroadcast::C2GS_OperateResultBroadcast(const C2GS_OperateResultBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_OperateResultBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_OperateResultBroadcast::~C2GS_OperateResultBroadcast() {
  SharedDtor();
}

void C2GS_OperateResultBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_OperateResultBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_OperateResultBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_OperateResultBroadcast_descriptor_;
}

const C2GS_OperateResultBroadcast& C2GS_OperateResultBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_OperateResultBroadcast* C2GS_OperateResultBroadcast::default_instance_ = NULL;

C2GS_OperateResultBroadcast* C2GS_OperateResultBroadcast::New() const {
  return new C2GS_OperateResultBroadcast;
}

void C2GS_OperateResultBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_OperateResultBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_OperateResultBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_OperateResultBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_OperateResultBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_OperateResultBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_OperateResultBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_OperateResultBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_OperateResultBroadcast::MergeFrom(const C2GS_OperateResultBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_OperateResultBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_OperateResultBroadcast::CopyFrom(const C2GS_OperateResultBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_OperateResultBroadcast::IsInitialized() const {

  return true;
}

void C2GS_OperateResultBroadcast::Swap(C2GS_OperateResultBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_OperateResultBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_OperateResultBroadcast_descriptor_;
  metadata.reflection = C2GS_OperateResultBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_OperateResultBroadcast::kErrorcodeFieldNumber;
const int GS2C_OperateResultBroadcast::kOperateUidFieldNumber;
const int GS2C_OperateResultBroadcast::kProvideUidFieldNumber;
const int GS2C_OperateResultBroadcast::kOperateCodeFieldNumber;
const int GS2C_OperateResultBroadcast::kOperateCardsFieldNumber;
const int GS2C_OperateResultBroadcast::kIsAngangFieldNumber;
#endif  // !_MSC_VER

GS2C_OperateResultBroadcast::GS2C_OperateResultBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_OperateResultBroadcast::InitAsDefaultInstance() {
}

GS2C_OperateResultBroadcast::GS2C_OperateResultBroadcast(const GS2C_OperateResultBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_OperateResultBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  operate_uid_ = 0;
  provide_uid_ = 0;
  operate_code_ = 0;
  is_angang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_OperateResultBroadcast::~GS2C_OperateResultBroadcast() {
  SharedDtor();
}

void GS2C_OperateResultBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_OperateResultBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_OperateResultBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_OperateResultBroadcast_descriptor_;
}

const GS2C_OperateResultBroadcast& GS2C_OperateResultBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_OperateResultBroadcast* GS2C_OperateResultBroadcast::default_instance_ = NULL;

GS2C_OperateResultBroadcast* GS2C_OperateResultBroadcast::New() const {
  return new GS2C_OperateResultBroadcast;
}

void GS2C_OperateResultBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    operate_uid_ = 0;
    provide_uid_ = 0;
    operate_code_ = 0;
    is_angang_ = 0;
  }
  operate_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_OperateResultBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_operate_uid;
        break;
      }

      // optional int32 operate_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_uid_)));
          set_has_operate_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provide_uid;
        break;
      }

      // optional int32 provide_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provide_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provide_uid_)));
          set_has_provide_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_operate_code;
        break;
      }

      // optional int32 operate_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operate_code_)));
          set_has_operate_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operate_cards;
        break;
      }

      // repeated int32 operate_cards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_operate_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_operate_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operate_cards;
        if (input->ExpectTag(48)) goto parse_is_angang;
        break;
      }

      // optional int32 is_angang = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_angang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_angang_)));
          set_has_is_angang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_OperateResultBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 operate_uid = 2;
  if (has_operate_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->operate_uid(), output);
  }

  // optional int32 provide_uid = 3;
  if (has_provide_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provide_uid(), output);
  }

  // optional int32 operate_code = 4;
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->operate_code(), output);
  }

  // repeated int32 operate_cards = 5;
  for (int i = 0; i < this->operate_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->operate_cards(i), output);
  }

  // optional int32 is_angang = 6;
  if (has_is_angang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->is_angang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_OperateResultBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 operate_uid = 2;
  if (has_operate_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->operate_uid(), target);
  }

  // optional int32 provide_uid = 3;
  if (has_provide_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provide_uid(), target);
  }

  // optional int32 operate_code = 4;
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operate_code(), target);
  }

  // repeated int32 operate_cards = 5;
  for (int i = 0; i < this->operate_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->operate_cards(i), target);
  }

  // optional int32 is_angang = 6;
  if (has_is_angang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->is_angang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_OperateResultBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 operate_uid = 2;
    if (has_operate_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_uid());
    }

    // optional int32 provide_uid = 3;
    if (has_provide_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provide_uid());
    }

    // optional int32 operate_code = 4;
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operate_code());
    }

    // optional int32 is_angang = 6;
    if (has_is_angang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_angang());
    }

  }
  // repeated int32 operate_cards = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->operate_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->operate_cards(i));
    }
    total_size += 1 * this->operate_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_OperateResultBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_OperateResultBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_OperateResultBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_OperateResultBroadcast::MergeFrom(const GS2C_OperateResultBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  operate_cards_.MergeFrom(from.operate_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_operate_uid()) {
      set_operate_uid(from.operate_uid());
    }
    if (from.has_provide_uid()) {
      set_provide_uid(from.provide_uid());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
    if (from.has_is_angang()) {
      set_is_angang(from.is_angang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_OperateResultBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_OperateResultBroadcast::CopyFrom(const GS2C_OperateResultBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_OperateResultBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_OperateResultBroadcast::Swap(GS2C_OperateResultBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(operate_uid_, other->operate_uid_);
    std::swap(provide_uid_, other->provide_uid_);
    std::swap(operate_code_, other->operate_code_);
    operate_cards_.Swap(&other->operate_cards_);
    std::swap(is_angang_, other->is_angang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_OperateResultBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_OperateResultBroadcast_descriptor_;
  metadata.reflection = GS2C_OperateResultBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_MinglouAsk::C2GS_MinglouAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_MinglouAsk::InitAsDefaultInstance() {
}

C2GS_MinglouAsk::C2GS_MinglouAsk(const C2GS_MinglouAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_MinglouAsk::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_MinglouAsk::~C2GS_MinglouAsk() {
  SharedDtor();
}

void C2GS_MinglouAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_MinglouAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_MinglouAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_MinglouAsk_descriptor_;
}

const C2GS_MinglouAsk& C2GS_MinglouAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_MinglouAsk* C2GS_MinglouAsk::default_instance_ = NULL;

C2GS_MinglouAsk* C2GS_MinglouAsk::New() const {
  return new C2GS_MinglouAsk;
}

void C2GS_MinglouAsk::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_MinglouAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_MinglouAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_MinglouAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_MinglouAsk::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_MinglouAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_MinglouAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_MinglouAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_MinglouAsk::MergeFrom(const C2GS_MinglouAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_MinglouAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_MinglouAsk::CopyFrom(const C2GS_MinglouAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_MinglouAsk::IsInitialized() const {

  return true;
}

void C2GS_MinglouAsk::Swap(C2GS_MinglouAsk* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_MinglouAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_MinglouAsk_descriptor_;
  metadata.reflection = C2GS_MinglouAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MinglouAsk::kErrorcodeFieldNumber;
const int GS2C_MinglouAsk::kCanDiscardCardsFieldNumber;
#endif  // !_MSC_VER

GS2C_MinglouAsk::GS2C_MinglouAsk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MinglouAsk::InitAsDefaultInstance() {
}

GS2C_MinglouAsk::GS2C_MinglouAsk(const GS2C_MinglouAsk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MinglouAsk::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MinglouAsk::~GS2C_MinglouAsk() {
  SharedDtor();
}

void GS2C_MinglouAsk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_MinglouAsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MinglouAsk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MinglouAsk_descriptor_;
}

const GS2C_MinglouAsk& GS2C_MinglouAsk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_MinglouAsk* GS2C_MinglouAsk::default_instance_ = NULL;

GS2C_MinglouAsk* GS2C_MinglouAsk::New() const {
  return new GS2C_MinglouAsk;
}

void GS2C_MinglouAsk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  can_discard_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MinglouAsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_discard_cards;
        break;
      }

      // repeated int32 can_discard_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_discard_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_can_discard_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_can_discard_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_can_discard_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MinglouAsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // repeated int32 can_discard_cards = 2;
  for (int i = 0; i < this->can_discard_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->can_discard_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MinglouAsk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // repeated int32 can_discard_cards = 2;
  for (int i = 0; i < this->can_discard_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->can_discard_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MinglouAsk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  // repeated int32 can_discard_cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_discard_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->can_discard_cards(i));
    }
    total_size += 1 * this->can_discard_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MinglouAsk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MinglouAsk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MinglouAsk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MinglouAsk::MergeFrom(const GS2C_MinglouAsk& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_discard_cards_.MergeFrom(from.can_discard_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MinglouAsk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MinglouAsk::CopyFrom(const GS2C_MinglouAsk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MinglouAsk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_MinglouAsk::Swap(GS2C_MinglouAsk* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    can_discard_cards_.Swap(&other->can_discard_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MinglouAsk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MinglouAsk_descriptor_;
  metadata.reflection = GS2C_MinglouAsk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Minglou::C2GS_Minglou()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Minglou::InitAsDefaultInstance() {
}

C2GS_Minglou::C2GS_Minglou(const C2GS_Minglou& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Minglou::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Minglou::~C2GS_Minglou() {
  SharedDtor();
}

void C2GS_Minglou::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Minglou::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Minglou::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Minglou_descriptor_;
}

const C2GS_Minglou& C2GS_Minglou::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Minglou* C2GS_Minglou::default_instance_ = NULL;

C2GS_Minglou* C2GS_Minglou::New() const {
  return new C2GS_Minglou;
}

void C2GS_Minglou::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Minglou::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Minglou::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Minglou::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Minglou::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Minglou::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Minglou* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Minglou*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Minglou::MergeFrom(const C2GS_Minglou& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Minglou::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Minglou::CopyFrom(const C2GS_Minglou& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Minglou::IsInitialized() const {

  return true;
}

void C2GS_Minglou::Swap(C2GS_Minglou* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Minglou::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Minglou_descriptor_;
  metadata.reflection = C2GS_Minglou_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Minglou::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Minglou::GS2C_Minglou()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Minglou::InitAsDefaultInstance() {
}

GS2C_Minglou::GS2C_Minglou(const GS2C_Minglou& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Minglou::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Minglou::~GS2C_Minglou() {
  SharedDtor();
}

void GS2C_Minglou::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Minglou::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Minglou::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Minglou_descriptor_;
}

const GS2C_Minglou& GS2C_Minglou::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Minglou* GS2C_Minglou::default_instance_ = NULL;

GS2C_Minglou* GS2C_Minglou::New() const {
  return new GS2C_Minglou;
}

void GS2C_Minglou::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Minglou::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Minglou::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Minglou::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Minglou::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Minglou::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Minglou* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Minglou*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Minglou::MergeFrom(const GS2C_Minglou& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Minglou::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Minglou::CopyFrom(const GS2C_Minglou& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Minglou::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Minglou::Swap(GS2C_Minglou* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Minglou::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Minglou_descriptor_;
  metadata.reflection = GS2C_Minglou_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_MinglouBroadcast::C2GS_MinglouBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_MinglouBroadcast::InitAsDefaultInstance() {
}

C2GS_MinglouBroadcast::C2GS_MinglouBroadcast(const C2GS_MinglouBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_MinglouBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_MinglouBroadcast::~C2GS_MinglouBroadcast() {
  SharedDtor();
}

void C2GS_MinglouBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_MinglouBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_MinglouBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_MinglouBroadcast_descriptor_;
}

const C2GS_MinglouBroadcast& C2GS_MinglouBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_MinglouBroadcast* C2GS_MinglouBroadcast::default_instance_ = NULL;

C2GS_MinglouBroadcast* C2GS_MinglouBroadcast::New() const {
  return new C2GS_MinglouBroadcast;
}

void C2GS_MinglouBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_MinglouBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_MinglouBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_MinglouBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_MinglouBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_MinglouBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_MinglouBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_MinglouBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_MinglouBroadcast::MergeFrom(const C2GS_MinglouBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_MinglouBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_MinglouBroadcast::CopyFrom(const C2GS_MinglouBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_MinglouBroadcast::IsInitialized() const {

  return true;
}

void C2GS_MinglouBroadcast::Swap(C2GS_MinglouBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_MinglouBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_MinglouBroadcast_descriptor_;
  metadata.reflection = C2GS_MinglouBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_MinglouBroadcast::kErrorcodeFieldNumber;
const int GS2C_MinglouBroadcast::kMinglouUidFieldNumber;
const int GS2C_MinglouBroadcast::kMinglouCardsFieldNumber;
#endif  // !_MSC_VER

GS2C_MinglouBroadcast::GS2C_MinglouBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_MinglouBroadcast::InitAsDefaultInstance() {
}

GS2C_MinglouBroadcast::GS2C_MinglouBroadcast(const GS2C_MinglouBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_MinglouBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  minglou_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_MinglouBroadcast::~GS2C_MinglouBroadcast() {
  SharedDtor();
}

void GS2C_MinglouBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_MinglouBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_MinglouBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_MinglouBroadcast_descriptor_;
}

const GS2C_MinglouBroadcast& GS2C_MinglouBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_MinglouBroadcast* GS2C_MinglouBroadcast::default_instance_ = NULL;

GS2C_MinglouBroadcast* GS2C_MinglouBroadcast::New() const {
  return new GS2C_MinglouBroadcast;
}

void GS2C_MinglouBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    minglou_uid_ = 0;
  }
  minglou_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_MinglouBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minglou_uid;
        break;
      }

      // optional int32 minglou_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minglou_uid_)));
          set_has_minglou_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minglou_cards;
        break;
      }

      // repeated int32 minglou_cards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minglou_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_minglou_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minglou_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minglou_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_MinglouBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 minglou_uid = 2;
  if (has_minglou_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minglou_uid(), output);
  }

  // repeated int32 minglou_cards = 3;
  for (int i = 0; i < this->minglou_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->minglou_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_MinglouBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 minglou_uid = 2;
  if (has_minglou_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minglou_uid(), target);
  }

  // repeated int32 minglou_cards = 3;
  for (int i = 0; i < this->minglou_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->minglou_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_MinglouBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 minglou_uid = 2;
    if (has_minglou_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minglou_uid());
    }

  }
  // repeated int32 minglou_cards = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->minglou_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minglou_cards(i));
    }
    total_size += 1 * this->minglou_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_MinglouBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_MinglouBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_MinglouBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_MinglouBroadcast::MergeFrom(const GS2C_MinglouBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  minglou_cards_.MergeFrom(from.minglou_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_minglou_uid()) {
      set_minglou_uid(from.minglou_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_MinglouBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_MinglouBroadcast::CopyFrom(const GS2C_MinglouBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_MinglouBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_MinglouBroadcast::Swap(GS2C_MinglouBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(minglou_uid_, other->minglou_uid_);
    minglou_cards_.Swap(&other->minglou_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_MinglouBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_MinglouBroadcast_descriptor_;
  metadata.reflection = GS2C_MinglouBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_Chat::kChatIndexFieldNumber;
#endif  // !_MSC_VER

C2GS_Chat::C2GS_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Chat::InitAsDefaultInstance() {
}

C2GS_Chat::C2GS_Chat(const C2GS_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Chat::SharedCtor() {
  _cached_size_ = 0;
  chat_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Chat::~C2GS_Chat() {
  SharedDtor();
}

void C2GS_Chat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Chat_descriptor_;
}

const C2GS_Chat& C2GS_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Chat* C2GS_Chat::default_instance_ = NULL;

C2GS_Chat* C2GS_Chat::New() const {
  return new C2GS_Chat;
}

void C2GS_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chat_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chat_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_index_)));
          set_has_chat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chat_index = 1;
  if (has_chat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chat_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chat_index = 1;
  if (has_chat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chat_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chat_index = 1;
    if (has_chat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Chat::MergeFrom(const C2GS_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_index()) {
      set_chat_index(from.chat_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Chat::CopyFrom(const C2GS_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Chat::IsInitialized() const {

  return true;
}

void C2GS_Chat::Swap(C2GS_Chat* other) {
  if (other != this) {
    std::swap(chat_index_, other->chat_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Chat_descriptor_;
  metadata.reflection = C2GS_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Chat::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Chat::GS2C_Chat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Chat::InitAsDefaultInstance() {
}

GS2C_Chat::GS2C_Chat(const GS2C_Chat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Chat::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Chat::~GS2C_Chat() {
  SharedDtor();
}

void GS2C_Chat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Chat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Chat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Chat_descriptor_;
}

const GS2C_Chat& GS2C_Chat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Chat* GS2C_Chat::default_instance_ = NULL;

GS2C_Chat* GS2C_Chat::New() const {
  return new GS2C_Chat;
}

void GS2C_Chat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Chat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Chat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Chat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Chat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Chat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Chat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Chat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Chat::MergeFrom(const GS2C_Chat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Chat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Chat::CopyFrom(const GS2C_Chat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Chat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Chat::Swap(GS2C_Chat* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Chat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Chat_descriptor_;
  metadata.reflection = GS2C_Chat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_ChatBroadcast::C2GS_ChatBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ChatBroadcast::InitAsDefaultInstance() {
}

C2GS_ChatBroadcast::C2GS_ChatBroadcast(const C2GS_ChatBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ChatBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ChatBroadcast::~C2GS_ChatBroadcast() {
  SharedDtor();
}

void C2GS_ChatBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_ChatBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ChatBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ChatBroadcast_descriptor_;
}

const C2GS_ChatBroadcast& C2GS_ChatBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_ChatBroadcast* C2GS_ChatBroadcast::default_instance_ = NULL;

C2GS_ChatBroadcast* C2GS_ChatBroadcast::New() const {
  return new C2GS_ChatBroadcast;
}

void C2GS_ChatBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ChatBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_ChatBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ChatBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ChatBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ChatBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ChatBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ChatBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ChatBroadcast::MergeFrom(const C2GS_ChatBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ChatBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ChatBroadcast::CopyFrom(const C2GS_ChatBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ChatBroadcast::IsInitialized() const {

  return true;
}

void C2GS_ChatBroadcast::Swap(C2GS_ChatBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ChatBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ChatBroadcast_descriptor_;
  metadata.reflection = C2GS_ChatBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ChatBroadcast::kErrorcodeFieldNumber;
const int GS2C_ChatBroadcast::kUidFieldNumber;
const int GS2C_ChatBroadcast::kChatIndexFieldNumber;
#endif  // !_MSC_VER

GS2C_ChatBroadcast::GS2C_ChatBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ChatBroadcast::InitAsDefaultInstance() {
}

GS2C_ChatBroadcast::GS2C_ChatBroadcast(const GS2C_ChatBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ChatBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = 0;
  chat_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ChatBroadcast::~GS2C_ChatBroadcast() {
  SharedDtor();
}

void GS2C_ChatBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ChatBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ChatBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ChatBroadcast_descriptor_;
}

const GS2C_ChatBroadcast& GS2C_ChatBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_ChatBroadcast* GS2C_ChatBroadcast::default_instance_ = NULL;

GS2C_ChatBroadcast* GS2C_ChatBroadcast::New() const {
  return new GS2C_ChatBroadcast;
}

void GS2C_ChatBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = 0;
    chat_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ChatBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat_index;
        break;
      }

      // required int32 chat_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_index_)));
          set_has_chat_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ChatBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // required int32 chat_index = 3;
  if (has_chat_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chat_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ChatBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // required int32 chat_index = 3;
  if (has_chat_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chat_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ChatBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required int32 chat_index = 3;
    if (has_chat_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ChatBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ChatBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ChatBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ChatBroadcast::MergeFrom(const GS2C_ChatBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_chat_index()) {
      set_chat_index(from.chat_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ChatBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ChatBroadcast::CopyFrom(const GS2C_ChatBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ChatBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_ChatBroadcast::Swap(GS2C_ChatBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(chat_index_, other->chat_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ChatBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ChatBroadcast_descriptor_;
  metadata.reflection = GS2C_ChatBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultItem::kUidFieldNumber;
const int ResultItem::kHandCardsFieldNumber;
const int ResultItem::kWeavesFieldNumber;
const int ResultItem::kGoldChangeFieldNumber;
const int ResultItem::kGoldTotalFieldNumber;
const int ResultItem::kHuaNumFieldNumber;
#endif  // !_MSC_VER

ResultItem::ResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultItem::InitAsDefaultInstance() {
}

ResultItem::ResultItem(const ResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  gold_change_ = 0;
  gold_total_ = 0;
  hua_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultItem::~ResultItem() {
  SharedDtor();
}

void ResultItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultItem_descriptor_;
}

const ResultItem& ResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

ResultItem* ResultItem::default_instance_ = NULL;

ResultItem* ResultItem::New() const {
  return new ResultItem;
}

void ResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    gold_change_ = 0;
    gold_total_ = 0;
    hua_num_ = 0;
  }
  hand_cards_.Clear();
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hand_cards;
        break;
      }

      // repeated int32 hand_cards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hand_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_hand_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hand_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hand_cards;
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .pb.WeaveItem weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectTag(32)) goto parse_gold_change;
        break;
      }

      // optional int32 gold_change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_change_)));
          set_has_gold_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gold_total;
        break;
      }

      // optional int32 gold_total = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_total_)));
          set_has_gold_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hua_num;
        break;
      }

      // optional int32 hua_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hua_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hua_num_)));
          set_has_hua_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // repeated int32 hand_cards = 2;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->hand_cards(i), output);
  }

  // repeated .pb.WeaveItem weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  // optional int32 gold_change = 4;
  if (has_gold_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold_change(), output);
  }

  // optional int32 gold_total = 5;
  if (has_gold_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold_total(), output);
  }

  // optional int32 hua_num = 6;
  if (has_hua_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hua_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // repeated int32 hand_cards = 2;
  for (int i = 0; i < this->hand_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->hand_cards(i), target);
  }

  // repeated .pb.WeaveItem weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  // optional int32 gold_change = 4;
  if (has_gold_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold_change(), target);
  }

  // optional int32 gold_total = 5;
  if (has_gold_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold_total(), target);
  }

  // optional int32 hua_num = 6;
  if (has_hua_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hua_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 gold_change = 4;
    if (has_gold_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_change());
    }

    // optional int32 gold_total = 5;
    if (has_gold_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_total());
    }

    // optional int32 hua_num = 6;
    if (has_hua_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hua_num());
    }

  }
  // repeated int32 hand_cards = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hand_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hand_cards(i));
    }
    total_size += 1 * this->hand_cards_size() + data_size;
  }

  // repeated .pb.WeaveItem weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultItem::MergeFrom(const ResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  hand_cards_.MergeFrom(from.hand_cards_);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gold_change()) {
      set_gold_change(from.gold_change());
    }
    if (from.has_gold_total()) {
      set_gold_total(from.gold_total());
    }
    if (from.has_hua_num()) {
      set_hua_num(from.hua_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultItem::CopyFrom(const ResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < weaves_size(); i++) {
    if (!this->weaves(i).IsInitialized()) return false;
  }
  return true;
}

void ResultItem::Swap(ResultItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    hand_cards_.Swap(&other->hand_cards_);
    weaves_.Swap(&other->weaves_);
    std::swap(gold_change_, other->gold_change_);
    std::swap(gold_total_, other->gold_total_);
    std::swap(hua_num_, other->hua_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultItem_descriptor_;
  metadata.reflection = ResultItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_RoundResultBroadcast::C2GS_RoundResultBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_RoundResultBroadcast::InitAsDefaultInstance() {
}

C2GS_RoundResultBroadcast::C2GS_RoundResultBroadcast(const C2GS_RoundResultBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_RoundResultBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_RoundResultBroadcast::~C2GS_RoundResultBroadcast() {
  SharedDtor();
}

void C2GS_RoundResultBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_RoundResultBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_RoundResultBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_RoundResultBroadcast_descriptor_;
}

const C2GS_RoundResultBroadcast& C2GS_RoundResultBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_RoundResultBroadcast* C2GS_RoundResultBroadcast::default_instance_ = NULL;

C2GS_RoundResultBroadcast* C2GS_RoundResultBroadcast::New() const {
  return new C2GS_RoundResultBroadcast;
}

void C2GS_RoundResultBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_RoundResultBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_RoundResultBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_RoundResultBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_RoundResultBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_RoundResultBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_RoundResultBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_RoundResultBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_RoundResultBroadcast::MergeFrom(const C2GS_RoundResultBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_RoundResultBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_RoundResultBroadcast::CopyFrom(const C2GS_RoundResultBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_RoundResultBroadcast::IsInitialized() const {

  return true;
}

void C2GS_RoundResultBroadcast::Swap(C2GS_RoundResultBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_RoundResultBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_RoundResultBroadcast_descriptor_;
  metadata.reflection = C2GS_RoundResultBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_RoundResultBroadcast::kErrorcodeFieldNumber;
const int GS2C_RoundResultBroadcast::kResultListFieldNumber;
const int GS2C_RoundResultBroadcast::kWinUidFieldNumber;
const int GS2C_RoundResultBroadcast::kProvideUidFieldNumber;
const int GS2C_RoundResultBroadcast::kWinFanCntFieldNumber;
const int GS2C_RoundResultBroadcast::kFanDetailsFieldNumber;
const int GS2C_RoundResultBroadcast::kIsMinglouFieldNumber;
const int GS2C_RoundResultBroadcast::kIsZimoFieldNumber;
const int GS2C_RoundResultBroadcast::kRuleFieldNumber;
#endif  // !_MSC_VER

GS2C_RoundResultBroadcast::GS2C_RoundResultBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_RoundResultBroadcast::InitAsDefaultInstance() {
}

GS2C_RoundResultBroadcast::GS2C_RoundResultBroadcast(const GS2C_RoundResultBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_RoundResultBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  win_uid_ = 0;
  provide_uid_ = 0;
  win_fan_cnt_ = 0;
  fan_details_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_minglou_ = 0;
  is_zimo_ = 0;
  rule_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_RoundResultBroadcast::~GS2C_RoundResultBroadcast() {
  SharedDtor();
}

void GS2C_RoundResultBroadcast::SharedDtor() {
  if (fan_details_ != &::google::protobuf::internal::kEmptyString) {
    delete fan_details_;
  }
  if (rule_ != &::google::protobuf::internal::kEmptyString) {
    delete rule_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_RoundResultBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_RoundResultBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_RoundResultBroadcast_descriptor_;
}

const GS2C_RoundResultBroadcast& GS2C_RoundResultBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_RoundResultBroadcast* GS2C_RoundResultBroadcast::default_instance_ = NULL;

GS2C_RoundResultBroadcast* GS2C_RoundResultBroadcast::New() const {
  return new GS2C_RoundResultBroadcast;
}

void GS2C_RoundResultBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    win_uid_ = 0;
    provide_uid_ = 0;
    win_fan_cnt_ = 0;
    if (has_fan_details()) {
      if (fan_details_ != &::google::protobuf::internal::kEmptyString) {
        fan_details_->clear();
      }
    }
    is_minglou_ = 0;
    is_zimo_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rule()) {
      if (rule_ != &::google::protobuf::internal::kEmptyString) {
        rule_->clear();
      }
    }
  }
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_RoundResultBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_list;
        break;
      }

      // repeated .pb.ResultItem result_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_result_list;
        if (input->ExpectTag(24)) goto parse_win_uid;
        break;
      }

      // optional int32 win_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_uid_)));
          set_has_win_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_provide_uid;
        break;
      }

      // optional int32 provide_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provide_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provide_uid_)));
          set_has_provide_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_fan_cnt;
        break;
      }

      // optional int32 win_fan_cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_fan_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_fan_cnt_)));
          set_has_win_fan_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fan_details;
        break;
      }

      // optional string fan_details = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fan_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fan_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fan_details().data(), this->fan_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_minglou;
        break;
      }

      // optional int32 is_minglou = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_minglou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_minglou_)));
          set_has_is_minglou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_zimo;
        break;
      }

      // optional int32 is_zimo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_zimo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_zimo_)));
          set_has_is_zimo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rule;
        break;
      }

      // optional string rule = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rule().data(), this->rule().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_RoundResultBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // repeated .pb.ResultItem result_list = 2;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->result_list(i), output);
  }

  // optional int32 win_uid = 3;
  if (has_win_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_uid(), output);
  }

  // optional int32 provide_uid = 4;
  if (has_provide_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->provide_uid(), output);
  }

  // optional int32 win_fan_cnt = 5;
  if (has_win_fan_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_fan_cnt(), output);
  }

  // optional string fan_details = 6;
  if (has_fan_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fan_details().data(), this->fan_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fan_details(), output);
  }

  // optional int32 is_minglou = 7;
  if (has_is_minglou()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_minglou(), output);
  }

  // optional int32 is_zimo = 8;
  if (has_is_zimo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->is_zimo(), output);
  }

  // optional string rule = 9;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule().data(), this->rule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_RoundResultBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // repeated .pb.ResultItem result_list = 2;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->result_list(i), target);
  }

  // optional int32 win_uid = 3;
  if (has_win_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_uid(), target);
  }

  // optional int32 provide_uid = 4;
  if (has_provide_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->provide_uid(), target);
  }

  // optional int32 win_fan_cnt = 5;
  if (has_win_fan_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_fan_cnt(), target);
  }

  // optional string fan_details = 6;
  if (has_fan_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fan_details().data(), this->fan_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->fan_details(), target);
  }

  // optional int32 is_minglou = 7;
  if (has_is_minglou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_minglou(), target);
  }

  // optional int32 is_zimo = 8;
  if (has_is_zimo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->is_zimo(), target);
  }

  // optional string rule = 9;
  if (has_rule()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rule().data(), this->rule().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_RoundResultBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 win_uid = 3;
    if (has_win_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_uid());
    }

    // optional int32 provide_uid = 4;
    if (has_provide_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provide_uid());
    }

    // optional int32 win_fan_cnt = 5;
    if (has_win_fan_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_fan_cnt());
    }

    // optional string fan_details = 6;
    if (has_fan_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fan_details());
    }

    // optional int32 is_minglou = 7;
    if (has_is_minglou()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_minglou());
    }

    // optional int32 is_zimo = 8;
    if (has_is_zimo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_zimo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rule = 9;
    if (has_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule());
    }

  }
  // repeated .pb.ResultItem result_list = 2;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_RoundResultBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_RoundResultBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_RoundResultBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_RoundResultBroadcast::MergeFrom(const GS2C_RoundResultBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_win_uid()) {
      set_win_uid(from.win_uid());
    }
    if (from.has_provide_uid()) {
      set_provide_uid(from.provide_uid());
    }
    if (from.has_win_fan_cnt()) {
      set_win_fan_cnt(from.win_fan_cnt());
    }
    if (from.has_fan_details()) {
      set_fan_details(from.fan_details());
    }
    if (from.has_is_minglou()) {
      set_is_minglou(from.is_minglou());
    }
    if (from.has_is_zimo()) {
      set_is_zimo(from.is_zimo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rule()) {
      set_rule(from.rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_RoundResultBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_RoundResultBroadcast::CopyFrom(const GS2C_RoundResultBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_RoundResultBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < result_list_size(); i++) {
    if (!this->result_list(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_RoundResultBroadcast::Swap(GS2C_RoundResultBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    result_list_.Swap(&other->result_list_);
    std::swap(win_uid_, other->win_uid_);
    std::swap(provide_uid_, other->provide_uid_);
    std::swap(win_fan_cnt_, other->win_fan_cnt_);
    std::swap(fan_details_, other->fan_details_);
    std::swap(is_minglou_, other->is_minglou_);
    std::swap(is_zimo_, other->is_zimo_);
    std::swap(rule_, other->rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_RoundResultBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_RoundResultBroadcast_descriptor_;
  metadata.reflection = GS2C_RoundResultBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryItem::kActionTypeFieldNumber;
const int HistoryItem::kActionUidFieldNumber;
const int HistoryItem::kProviderUidFieldNumber;
const int HistoryItem::kActionCardsFieldNumber;
#endif  // !_MSC_VER

HistoryItem::HistoryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryItem::InitAsDefaultInstance() {
}

HistoryItem::HistoryItem(const HistoryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryItem::SharedCtor() {
  _cached_size_ = 0;
  action_type_ = GOOGLE_LONGLONG(0);
  action_uid_ = 0;
  provider_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryItem::~HistoryItem() {
  SharedDtor();
}

void HistoryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryItem_descriptor_;
}

const HistoryItem& HistoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

HistoryItem* HistoryItem::default_instance_ = NULL;

HistoryItem* HistoryItem::New() const {
  return new HistoryItem;
}

void HistoryItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_type_ = GOOGLE_LONGLONG(0);
    action_uid_ = 0;
    provider_uid_ = 0;
  }
  action_cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 action_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &action_type_)));
          set_has_action_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_uid;
        break;
      }

      // optional int32 action_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_uid_)));
          set_has_action_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provider_uid;
        break;
      }

      // optional int32 provider_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provider_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provider_uid_)));
          set_has_provider_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_cards;
        break;
      }

      // repeated int32 action_cards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_action_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_action_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 action_type = 1;
  if (has_action_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->action_type(), output);
  }

  // optional int32 action_uid = 2;
  if (has_action_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_uid(), output);
  }

  // optional int32 provider_uid = 3;
  if (has_provider_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provider_uid(), output);
  }

  // repeated int32 action_cards = 4;
  for (int i = 0; i < this->action_cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->action_cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 action_type = 1;
  if (has_action_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->action_type(), target);
  }

  // optional int32 action_uid = 2;
  if (has_action_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_uid(), target);
  }

  // optional int32 provider_uid = 3;
  if (has_provider_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provider_uid(), target);
  }

  // repeated int32 action_cards = 4;
  for (int i = 0; i < this->action_cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->action_cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 action_type = 1;
    if (has_action_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->action_type());
    }

    // optional int32 action_uid = 2;
    if (has_action_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_uid());
    }

    // optional int32 provider_uid = 3;
    if (has_provider_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provider_uid());
    }

  }
  // repeated int32 action_cards = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->action_cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->action_cards(i));
    }
    total_size += 1 * this->action_cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryItem::MergeFrom(const HistoryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  action_cards_.MergeFrom(from.action_cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_type()) {
      set_action_type(from.action_type());
    }
    if (from.has_action_uid()) {
      set_action_uid(from.action_uid());
    }
    if (from.has_provider_uid()) {
      set_provider_uid(from.provider_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryItem::CopyFrom(const HistoryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HistoryItem::Swap(HistoryItem* other) {
  if (other != this) {
    std::swap(action_type_, other->action_type_);
    std::swap(action_uid_, other->action_uid_);
    std::swap(provider_uid_, other->provider_uid_);
    action_cards_.Swap(&other->action_cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryItem_descriptor_;
  metadata.reflection = HistoryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_HistoryBroadcast::C2GS_HistoryBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_HistoryBroadcast::InitAsDefaultInstance() {
}

C2GS_HistoryBroadcast::C2GS_HistoryBroadcast(const C2GS_HistoryBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_HistoryBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_HistoryBroadcast::~C2GS_HistoryBroadcast() {
  SharedDtor();
}

void C2GS_HistoryBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_HistoryBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_HistoryBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_HistoryBroadcast_descriptor_;
}

const C2GS_HistoryBroadcast& C2GS_HistoryBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_HistoryBroadcast* C2GS_HistoryBroadcast::default_instance_ = NULL;

C2GS_HistoryBroadcast* C2GS_HistoryBroadcast::New() const {
  return new C2GS_HistoryBroadcast;
}

void C2GS_HistoryBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_HistoryBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_HistoryBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_HistoryBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_HistoryBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_HistoryBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_HistoryBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_HistoryBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_HistoryBroadcast::MergeFrom(const C2GS_HistoryBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_HistoryBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_HistoryBroadcast::CopyFrom(const C2GS_HistoryBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_HistoryBroadcast::IsInitialized() const {

  return true;
}

void C2GS_HistoryBroadcast::Swap(C2GS_HistoryBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_HistoryBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_HistoryBroadcast_descriptor_;
  metadata.reflection = C2GS_HistoryBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_HistoryBroadcast::kErrorcodeFieldNumber;
const int GS2C_HistoryBroadcast::kHistoryNameFieldNumber;
const int GS2C_HistoryBroadcast::kHistoryListFieldNumber;
#endif  // !_MSC_VER

GS2C_HistoryBroadcast::GS2C_HistoryBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_HistoryBroadcast::InitAsDefaultInstance() {
}

GS2C_HistoryBroadcast::GS2C_HistoryBroadcast(const GS2C_HistoryBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_HistoryBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  history_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_HistoryBroadcast::~GS2C_HistoryBroadcast() {
  SharedDtor();
}

void GS2C_HistoryBroadcast::SharedDtor() {
  if (history_name_ != &::google::protobuf::internal::kEmptyString) {
    delete history_name_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_HistoryBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_HistoryBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_HistoryBroadcast_descriptor_;
}

const GS2C_HistoryBroadcast& GS2C_HistoryBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_HistoryBroadcast* GS2C_HistoryBroadcast::default_instance_ = NULL;

GS2C_HistoryBroadcast* GS2C_HistoryBroadcast::New() const {
  return new GS2C_HistoryBroadcast;
}

void GS2C_HistoryBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_history_name()) {
      if (history_name_ != &::google::protobuf::internal::kEmptyString) {
        history_name_->clear();
      }
    }
  }
  history_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_HistoryBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_history_name;
        break;
      }

      // optional string history_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_history_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->history_name().data(), this->history_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history_list;
        break;
      }

      // repeated .pb.HistoryItem history_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_history_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_HistoryBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional string history_name = 2;
  if (has_history_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_name().data(), this->history_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->history_name(), output);
  }

  // repeated .pb.HistoryItem history_list = 3;
  for (int i = 0; i < this->history_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->history_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_HistoryBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional string history_name = 2;
  if (has_history_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_name().data(), this->history_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->history_name(), target);
  }

  // repeated .pb.HistoryItem history_list = 3;
  for (int i = 0; i < this->history_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->history_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_HistoryBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional string history_name = 2;
    if (has_history_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->history_name());
    }

  }
  // repeated .pb.HistoryItem history_list = 3;
  total_size += 1 * this->history_list_size();
  for (int i = 0; i < this->history_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_HistoryBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_HistoryBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_HistoryBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_HistoryBroadcast::MergeFrom(const GS2C_HistoryBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_list_.MergeFrom(from.history_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_history_name()) {
      set_history_name(from.history_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_HistoryBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_HistoryBroadcast::CopyFrom(const GS2C_HistoryBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_HistoryBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < history_list_size(); i++) {
    if (!this->history_list(i).IsInitialized()) return false;
  }
  return true;
}

void GS2C_HistoryBroadcast::Swap(GS2C_HistoryBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(history_name_, other->history_name_);
    history_list_.Swap(&other->history_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_HistoryBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_HistoryBroadcast_descriptor_;
  metadata.reflection = GS2C_HistoryBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_DismissAskBroadcast::C2GS_DismissAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_DismissAskBroadcast::InitAsDefaultInstance() {
}

C2GS_DismissAskBroadcast::C2GS_DismissAskBroadcast(const C2GS_DismissAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_DismissAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_DismissAskBroadcast::~C2GS_DismissAskBroadcast() {
  SharedDtor();
}

void C2GS_DismissAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_DismissAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_DismissAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_DismissAskBroadcast_descriptor_;
}

const C2GS_DismissAskBroadcast& C2GS_DismissAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_DismissAskBroadcast* C2GS_DismissAskBroadcast::default_instance_ = NULL;

C2GS_DismissAskBroadcast* C2GS_DismissAskBroadcast::New() const {
  return new C2GS_DismissAskBroadcast;
}

void C2GS_DismissAskBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_DismissAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_DismissAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_DismissAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_DismissAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_DismissAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_DismissAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_DismissAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_DismissAskBroadcast::MergeFrom(const C2GS_DismissAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_DismissAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_DismissAskBroadcast::CopyFrom(const C2GS_DismissAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_DismissAskBroadcast::IsInitialized() const {

  return true;
}

void C2GS_DismissAskBroadcast::Swap(C2GS_DismissAskBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_DismissAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_DismissAskBroadcast_descriptor_;
  metadata.reflection = C2GS_DismissAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DismissAskBroadcast::kErrorcodeFieldNumber;
const int GS2C_DismissAskBroadcast::kAskUidFieldNumber;
#endif  // !_MSC_VER

GS2C_DismissAskBroadcast::GS2C_DismissAskBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DismissAskBroadcast::InitAsDefaultInstance() {
}

GS2C_DismissAskBroadcast::GS2C_DismissAskBroadcast(const GS2C_DismissAskBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DismissAskBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ask_uid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DismissAskBroadcast::~GS2C_DismissAskBroadcast() {
  SharedDtor();
}

void GS2C_DismissAskBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DismissAskBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DismissAskBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DismissAskBroadcast_descriptor_;
}

const GS2C_DismissAskBroadcast& GS2C_DismissAskBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_DismissAskBroadcast* GS2C_DismissAskBroadcast::default_instance_ = NULL;

GS2C_DismissAskBroadcast* GS2C_DismissAskBroadcast::New() const {
  return new GS2C_DismissAskBroadcast;
}

void GS2C_DismissAskBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    ask_uid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DismissAskBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ask_uid;
        break;
      }

      // optional int32 ask_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ask_uid_)));
          set_has_ask_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DismissAskBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 ask_uid = 2;
  if (has_ask_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ask_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DismissAskBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 ask_uid = 2;
  if (has_ask_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ask_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DismissAskBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 ask_uid = 2;
    if (has_ask_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ask_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DismissAskBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DismissAskBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DismissAskBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DismissAskBroadcast::MergeFrom(const GS2C_DismissAskBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_ask_uid()) {
      set_ask_uid(from.ask_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DismissAskBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DismissAskBroadcast::CopyFrom(const GS2C_DismissAskBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DismissAskBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_DismissAskBroadcast::Swap(GS2C_DismissAskBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(ask_uid_, other->ask_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DismissAskBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DismissAskBroadcast_descriptor_;
  metadata.reflection = GS2C_DismissAskBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_DismissAnswer::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

C2GS_DismissAnswer::C2GS_DismissAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_DismissAnswer::InitAsDefaultInstance() {
}

C2GS_DismissAnswer::C2GS_DismissAnswer(const C2GS_DismissAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_DismissAnswer::SharedCtor() {
  _cached_size_ = 0;
  is_agree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_DismissAnswer::~C2GS_DismissAnswer() {
  SharedDtor();
}

void C2GS_DismissAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_DismissAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_DismissAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_DismissAnswer_descriptor_;
}

const C2GS_DismissAnswer& C2GS_DismissAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_DismissAnswer* C2GS_DismissAnswer::default_instance_ = NULL;

C2GS_DismissAnswer* C2GS_DismissAnswer::New() const {
  return new C2GS_DismissAnswer;
}

void C2GS_DismissAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_agree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_DismissAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_agree_)));
          set_has_is_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_DismissAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_agree = 1;
  if (has_is_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_DismissAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_agree = 1;
  if (has_is_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_DismissAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_agree = 1;
    if (has_is_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_agree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_DismissAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_DismissAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_DismissAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_DismissAnswer::MergeFrom(const C2GS_DismissAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_agree()) {
      set_is_agree(from.is_agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_DismissAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_DismissAnswer::CopyFrom(const C2GS_DismissAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_DismissAnswer::IsInitialized() const {

  return true;
}

void C2GS_DismissAnswer::Swap(C2GS_DismissAnswer* other) {
  if (other != this) {
    std::swap(is_agree_, other->is_agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_DismissAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_DismissAnswer_descriptor_;
  metadata.reflection = C2GS_DismissAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DismissAnswer::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_DismissAnswer::GS2C_DismissAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DismissAnswer::InitAsDefaultInstance() {
}

GS2C_DismissAnswer::GS2C_DismissAnswer(const GS2C_DismissAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DismissAnswer::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DismissAnswer::~GS2C_DismissAnswer() {
  SharedDtor();
}

void GS2C_DismissAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DismissAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DismissAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DismissAnswer_descriptor_;
}

const GS2C_DismissAnswer& GS2C_DismissAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_DismissAnswer* GS2C_DismissAnswer::default_instance_ = NULL;

GS2C_DismissAnswer* GS2C_DismissAnswer::New() const {
  return new GS2C_DismissAnswer;
}

void GS2C_DismissAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DismissAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DismissAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DismissAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DismissAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DismissAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DismissAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DismissAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DismissAnswer::MergeFrom(const GS2C_DismissAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DismissAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DismissAnswer::CopyFrom(const GS2C_DismissAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DismissAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_DismissAnswer::Swap(GS2C_DismissAnswer* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DismissAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DismissAnswer_descriptor_;
  metadata.reflection = GS2C_DismissAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_DismissAnswerBroadcast::C2GS_DismissAnswerBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_DismissAnswerBroadcast::InitAsDefaultInstance() {
}

C2GS_DismissAnswerBroadcast::C2GS_DismissAnswerBroadcast(const C2GS_DismissAnswerBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_DismissAnswerBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_DismissAnswerBroadcast::~C2GS_DismissAnswerBroadcast() {
  SharedDtor();
}

void C2GS_DismissAnswerBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_DismissAnswerBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_DismissAnswerBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_DismissAnswerBroadcast_descriptor_;
}

const C2GS_DismissAnswerBroadcast& C2GS_DismissAnswerBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_DismissAnswerBroadcast* C2GS_DismissAnswerBroadcast::default_instance_ = NULL;

C2GS_DismissAnswerBroadcast* C2GS_DismissAnswerBroadcast::New() const {
  return new C2GS_DismissAnswerBroadcast;
}

void C2GS_DismissAnswerBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_DismissAnswerBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_DismissAnswerBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_DismissAnswerBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_DismissAnswerBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_DismissAnswerBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_DismissAnswerBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_DismissAnswerBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_DismissAnswerBroadcast::MergeFrom(const C2GS_DismissAnswerBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_DismissAnswerBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_DismissAnswerBroadcast::CopyFrom(const C2GS_DismissAnswerBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_DismissAnswerBroadcast::IsInitialized() const {

  return true;
}

void C2GS_DismissAnswerBroadcast::Swap(C2GS_DismissAnswerBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_DismissAnswerBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_DismissAnswerBroadcast_descriptor_;
  metadata.reflection = C2GS_DismissAnswerBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DismissAnswerBroadcast::kErrorcodeFieldNumber;
const int GS2C_DismissAnswerBroadcast::kUidFieldNumber;
const int GS2C_DismissAnswerBroadcast::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

GS2C_DismissAnswerBroadcast::GS2C_DismissAnswerBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DismissAnswerBroadcast::InitAsDefaultInstance() {
}

GS2C_DismissAnswerBroadcast::GS2C_DismissAnswerBroadcast(const GS2C_DismissAnswerBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DismissAnswerBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  is_agree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DismissAnswerBroadcast::~GS2C_DismissAnswerBroadcast() {
  SharedDtor();
}

void GS2C_DismissAnswerBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DismissAnswerBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DismissAnswerBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DismissAnswerBroadcast_descriptor_;
}

const GS2C_DismissAnswerBroadcast& GS2C_DismissAnswerBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_DismissAnswerBroadcast* GS2C_DismissAnswerBroadcast::default_instance_ = NULL;

GS2C_DismissAnswerBroadcast* GS2C_DismissAnswerBroadcast::New() const {
  return new GS2C_DismissAnswerBroadcast;
}

void GS2C_DismissAnswerBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    is_agree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DismissAnswerBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_agree;
        break;
      }

      // optional int32 is_agree = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_agree_)));
          set_has_is_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DismissAnswerBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int32 is_agree = 3;
  if (has_is_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DismissAnswerBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int32 is_agree = 3;
  if (has_is_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DismissAnswerBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 is_agree = 3;
    if (has_is_agree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_agree());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DismissAnswerBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DismissAnswerBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DismissAnswerBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DismissAnswerBroadcast::MergeFrom(const GS2C_DismissAnswerBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_is_agree()) {
      set_is_agree(from.is_agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DismissAnswerBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DismissAnswerBroadcast::CopyFrom(const GS2C_DismissAnswerBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DismissAnswerBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_DismissAnswerBroadcast::Swap(GS2C_DismissAnswerBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(is_agree_, other->is_agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DismissAnswerBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DismissAnswerBroadcast_descriptor_;
  metadata.reflection = GS2C_DismissAnswerBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_DismissBroadcast::C2GS_DismissBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_DismissBroadcast::InitAsDefaultInstance() {
}

C2GS_DismissBroadcast::C2GS_DismissBroadcast(const C2GS_DismissBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_DismissBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_DismissBroadcast::~C2GS_DismissBroadcast() {
  SharedDtor();
}

void C2GS_DismissBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_DismissBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_DismissBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_DismissBroadcast_descriptor_;
}

const C2GS_DismissBroadcast& C2GS_DismissBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_DismissBroadcast* C2GS_DismissBroadcast::default_instance_ = NULL;

C2GS_DismissBroadcast* C2GS_DismissBroadcast::New() const {
  return new C2GS_DismissBroadcast;
}

void C2GS_DismissBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_DismissBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_DismissBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_DismissBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_DismissBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_DismissBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_DismissBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_DismissBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_DismissBroadcast::MergeFrom(const C2GS_DismissBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_DismissBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_DismissBroadcast::CopyFrom(const C2GS_DismissBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_DismissBroadcast::IsInitialized() const {

  return true;
}

void C2GS_DismissBroadcast::Swap(C2GS_DismissBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_DismissBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_DismissBroadcast_descriptor_;
  metadata.reflection = C2GS_DismissBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_DismissBroadcast::kErrorcodeFieldNumber;
const int GS2C_DismissBroadcast::kIsDismissFieldNumber;
#endif  // !_MSC_VER

GS2C_DismissBroadcast::GS2C_DismissBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_DismissBroadcast::InitAsDefaultInstance() {
}

GS2C_DismissBroadcast::GS2C_DismissBroadcast(const GS2C_DismissBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_DismissBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  is_dismiss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_DismissBroadcast::~GS2C_DismissBroadcast() {
  SharedDtor();
}

void GS2C_DismissBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_DismissBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_DismissBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_DismissBroadcast_descriptor_;
}

const GS2C_DismissBroadcast& GS2C_DismissBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_DismissBroadcast* GS2C_DismissBroadcast::default_instance_ = NULL;

GS2C_DismissBroadcast* GS2C_DismissBroadcast::New() const {
  return new GS2C_DismissBroadcast;
}

void GS2C_DismissBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    is_dismiss_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_DismissBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_dismiss;
        break;
      }

      // optional int32 is_dismiss = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dismiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_dismiss_)));
          set_has_is_dismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_DismissBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // optional int32 is_dismiss = 2;
  if (has_is_dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_dismiss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_DismissBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // optional int32 is_dismiss = 2;
  if (has_is_dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_dismiss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_DismissBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // optional int32 is_dismiss = 2;
    if (has_is_dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_dismiss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_DismissBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_DismissBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_DismissBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_DismissBroadcast::MergeFrom(const GS2C_DismissBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_is_dismiss()) {
      set_is_dismiss(from.is_dismiss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_DismissBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_DismissBroadcast::CopyFrom(const GS2C_DismissBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_DismissBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_DismissBroadcast::Swap(GS2C_DismissBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(is_dismiss_, other->is_dismiss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_DismissBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_DismissBroadcast_descriptor_;
  metadata.reflection = GS2C_DismissBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_VoiceTalk::kVoiceDataFieldNumber;
#endif  // !_MSC_VER

C2GS_VoiceTalk::C2GS_VoiceTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_VoiceTalk::InitAsDefaultInstance() {
}

C2GS_VoiceTalk::C2GS_VoiceTalk(const C2GS_VoiceTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_VoiceTalk::SharedCtor() {
  _cached_size_ = 0;
  voice_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_VoiceTalk::~C2GS_VoiceTalk() {
  SharedDtor();
}

void C2GS_VoiceTalk::SharedDtor() {
  if (voice_data_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_data_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_VoiceTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_VoiceTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_VoiceTalk_descriptor_;
}

const C2GS_VoiceTalk& C2GS_VoiceTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_VoiceTalk* C2GS_VoiceTalk::default_instance_ = NULL;

C2GS_VoiceTalk* C2GS_VoiceTalk::New() const {
  return new C2GS_VoiceTalk;
}

void C2GS_VoiceTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_voice_data()) {
      if (voice_data_ != &::google::protobuf::internal::kEmptyString) {
        voice_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_VoiceTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes voice_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_VoiceTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes voice_data = 1;
  if (has_voice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->voice_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_VoiceTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes voice_data = 1;
  if (has_voice_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->voice_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_VoiceTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes voice_data = 1;
    if (has_voice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_VoiceTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_VoiceTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_VoiceTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_VoiceTalk::MergeFrom(const C2GS_VoiceTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voice_data()) {
      set_voice_data(from.voice_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_VoiceTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_VoiceTalk::CopyFrom(const C2GS_VoiceTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_VoiceTalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_VoiceTalk::Swap(C2GS_VoiceTalk* other) {
  if (other != this) {
    std::swap(voice_data_, other->voice_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_VoiceTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_VoiceTalk_descriptor_;
  metadata.reflection = C2GS_VoiceTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_VoiceTalk::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_VoiceTalk::GS2C_VoiceTalk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_VoiceTalk::InitAsDefaultInstance() {
}

GS2C_VoiceTalk::GS2C_VoiceTalk(const GS2C_VoiceTalk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_VoiceTalk::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_VoiceTalk::~GS2C_VoiceTalk() {
  SharedDtor();
}

void GS2C_VoiceTalk::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_VoiceTalk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_VoiceTalk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_VoiceTalk_descriptor_;
}

const GS2C_VoiceTalk& GS2C_VoiceTalk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_VoiceTalk* GS2C_VoiceTalk::default_instance_ = NULL;

GS2C_VoiceTalk* GS2C_VoiceTalk::New() const {
  return new GS2C_VoiceTalk;
}

void GS2C_VoiceTalk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_VoiceTalk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_VoiceTalk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_VoiceTalk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_VoiceTalk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_VoiceTalk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_VoiceTalk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_VoiceTalk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_VoiceTalk::MergeFrom(const GS2C_VoiceTalk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_VoiceTalk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_VoiceTalk::CopyFrom(const GS2C_VoiceTalk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_VoiceTalk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_VoiceTalk::Swap(GS2C_VoiceTalk* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_VoiceTalk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_VoiceTalk_descriptor_;
  metadata.reflection = GS2C_VoiceTalk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_VoiceTalkBroadcast::C2GS_VoiceTalkBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_VoiceTalkBroadcast::InitAsDefaultInstance() {
}

C2GS_VoiceTalkBroadcast::C2GS_VoiceTalkBroadcast(const C2GS_VoiceTalkBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_VoiceTalkBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_VoiceTalkBroadcast::~C2GS_VoiceTalkBroadcast() {
  SharedDtor();
}

void C2GS_VoiceTalkBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_VoiceTalkBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_VoiceTalkBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_VoiceTalkBroadcast_descriptor_;
}

const C2GS_VoiceTalkBroadcast& C2GS_VoiceTalkBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_VoiceTalkBroadcast* C2GS_VoiceTalkBroadcast::default_instance_ = NULL;

C2GS_VoiceTalkBroadcast* C2GS_VoiceTalkBroadcast::New() const {
  return new C2GS_VoiceTalkBroadcast;
}

void C2GS_VoiceTalkBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_VoiceTalkBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_VoiceTalkBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_VoiceTalkBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_VoiceTalkBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_VoiceTalkBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_VoiceTalkBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_VoiceTalkBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_VoiceTalkBroadcast::MergeFrom(const C2GS_VoiceTalkBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_VoiceTalkBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_VoiceTalkBroadcast::CopyFrom(const C2GS_VoiceTalkBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_VoiceTalkBroadcast::IsInitialized() const {

  return true;
}

void C2GS_VoiceTalkBroadcast::Swap(C2GS_VoiceTalkBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_VoiceTalkBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_VoiceTalkBroadcast_descriptor_;
  metadata.reflection = C2GS_VoiceTalkBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_VoiceTalkBroadcast::kErrorcodeFieldNumber;
const int GS2C_VoiceTalkBroadcast::kUidFieldNumber;
const int GS2C_VoiceTalkBroadcast::kVoiceDataFieldNumber;
#endif  // !_MSC_VER

GS2C_VoiceTalkBroadcast::GS2C_VoiceTalkBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_VoiceTalkBroadcast::InitAsDefaultInstance() {
}

GS2C_VoiceTalkBroadcast::GS2C_VoiceTalkBroadcast(const GS2C_VoiceTalkBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_VoiceTalkBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  voice_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_VoiceTalkBroadcast::~GS2C_VoiceTalkBroadcast() {
  SharedDtor();
}

void GS2C_VoiceTalkBroadcast::SharedDtor() {
  if (voice_data_ != &::google::protobuf::internal::kEmptyString) {
    delete voice_data_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_VoiceTalkBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_VoiceTalkBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_VoiceTalkBroadcast_descriptor_;
}

const GS2C_VoiceTalkBroadcast& GS2C_VoiceTalkBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_VoiceTalkBroadcast* GS2C_VoiceTalkBroadcast::default_instance_ = NULL;

GS2C_VoiceTalkBroadcast* GS2C_VoiceTalkBroadcast::New() const {
  return new GS2C_VoiceTalkBroadcast;
}

void GS2C_VoiceTalkBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (has_voice_data()) {
      if (voice_data_ != &::google::protobuf::internal::kEmptyString) {
        voice_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_VoiceTalkBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voice_data;
        break;
      }

      // required bytes voice_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voice_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_VoiceTalkBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // required bytes voice_data = 3;
  if (has_voice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->voice_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_VoiceTalkBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // required bytes voice_data = 3;
  if (has_voice_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->voice_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_VoiceTalkBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // required bytes voice_data = 3;
    if (has_voice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_VoiceTalkBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_VoiceTalkBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_VoiceTalkBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_VoiceTalkBroadcast::MergeFrom(const GS2C_VoiceTalkBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_voice_data()) {
      set_voice_data(from.voice_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_VoiceTalkBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_VoiceTalkBroadcast::CopyFrom(const GS2C_VoiceTalkBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_VoiceTalkBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_VoiceTalkBroadcast::Swap(GS2C_VoiceTalkBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(voice_data_, other->voice_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_VoiceTalkBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_VoiceTalkBroadcast_descriptor_;
  metadata.reflection = GS2C_VoiceTalkBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_ChatCustom::kChatContentFieldNumber;
#endif  // !_MSC_VER

C2GS_ChatCustom::C2GS_ChatCustom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ChatCustom::InitAsDefaultInstance() {
}

C2GS_ChatCustom::C2GS_ChatCustom(const C2GS_ChatCustom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ChatCustom::SharedCtor() {
  _cached_size_ = 0;
  chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ChatCustom::~C2GS_ChatCustom() {
  SharedDtor();
}

void C2GS_ChatCustom::SharedDtor() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (this != default_instance_) {
  }
}

void C2GS_ChatCustom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ChatCustom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ChatCustom_descriptor_;
}

const C2GS_ChatCustom& C2GS_ChatCustom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_ChatCustom* C2GS_ChatCustom::default_instance_ = NULL;

C2GS_ChatCustom* C2GS_ChatCustom::New() const {
  return new C2GS_ChatCustom;
}

void C2GS_ChatCustom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chat_content()) {
      if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
        chat_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ChatCustom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string chat_content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_content().data(), this->chat_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_ChatCustom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string chat_content = 1;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->chat_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ChatCustom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string chat_content = 1;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->chat_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ChatCustom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string chat_content = 1;
    if (has_chat_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ChatCustom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ChatCustom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ChatCustom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ChatCustom::MergeFrom(const C2GS_ChatCustom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_content()) {
      set_chat_content(from.chat_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ChatCustom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ChatCustom::CopyFrom(const C2GS_ChatCustom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ChatCustom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_ChatCustom::Swap(C2GS_ChatCustom* other) {
  if (other != this) {
    std::swap(chat_content_, other->chat_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ChatCustom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ChatCustom_descriptor_;
  metadata.reflection = C2GS_ChatCustom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ChatCustom::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_ChatCustom::GS2C_ChatCustom()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ChatCustom::InitAsDefaultInstance() {
}

GS2C_ChatCustom::GS2C_ChatCustom(const GS2C_ChatCustom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ChatCustom::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ChatCustom::~GS2C_ChatCustom() {
  SharedDtor();
}

void GS2C_ChatCustom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ChatCustom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ChatCustom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ChatCustom_descriptor_;
}

const GS2C_ChatCustom& GS2C_ChatCustom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_ChatCustom* GS2C_ChatCustom::default_instance_ = NULL;

GS2C_ChatCustom* GS2C_ChatCustom::New() const {
  return new GS2C_ChatCustom;
}

void GS2C_ChatCustom::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ChatCustom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ChatCustom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ChatCustom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ChatCustom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ChatCustom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ChatCustom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ChatCustom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ChatCustom::MergeFrom(const GS2C_ChatCustom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ChatCustom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ChatCustom::CopyFrom(const GS2C_ChatCustom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ChatCustom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_ChatCustom::Swap(GS2C_ChatCustom* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ChatCustom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ChatCustom_descriptor_;
  metadata.reflection = GS2C_ChatCustom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_ChatCustomBroadcast::C2GS_ChatCustomBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ChatCustomBroadcast::InitAsDefaultInstance() {
}

C2GS_ChatCustomBroadcast::C2GS_ChatCustomBroadcast(const C2GS_ChatCustomBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ChatCustomBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ChatCustomBroadcast::~C2GS_ChatCustomBroadcast() {
  SharedDtor();
}

void C2GS_ChatCustomBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_ChatCustomBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ChatCustomBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ChatCustomBroadcast_descriptor_;
}

const C2GS_ChatCustomBroadcast& C2GS_ChatCustomBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_ChatCustomBroadcast* C2GS_ChatCustomBroadcast::default_instance_ = NULL;

C2GS_ChatCustomBroadcast* C2GS_ChatCustomBroadcast::New() const {
  return new C2GS_ChatCustomBroadcast;
}

void C2GS_ChatCustomBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ChatCustomBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_ChatCustomBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ChatCustomBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ChatCustomBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ChatCustomBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ChatCustomBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ChatCustomBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ChatCustomBroadcast::MergeFrom(const C2GS_ChatCustomBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ChatCustomBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ChatCustomBroadcast::CopyFrom(const C2GS_ChatCustomBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ChatCustomBroadcast::IsInitialized() const {

  return true;
}

void C2GS_ChatCustomBroadcast::Swap(C2GS_ChatCustomBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ChatCustomBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ChatCustomBroadcast_descriptor_;
  metadata.reflection = C2GS_ChatCustomBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ChatCustomBroadcast::kErrorcodeFieldNumber;
const int GS2C_ChatCustomBroadcast::kUidFieldNumber;
const int GS2C_ChatCustomBroadcast::kChatContentFieldNumber;
#endif  // !_MSC_VER

GS2C_ChatCustomBroadcast::GS2C_ChatCustomBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ChatCustomBroadcast::InitAsDefaultInstance() {
}

GS2C_ChatCustomBroadcast::GS2C_ChatCustomBroadcast(const GS2C_ChatCustomBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ChatCustomBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = 0;
  chat_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ChatCustomBroadcast::~GS2C_ChatCustomBroadcast() {
  SharedDtor();
}

void GS2C_ChatCustomBroadcast::SharedDtor() {
  if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_content_;
  }
  if (this != default_instance_) {
  }
}

void GS2C_ChatCustomBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ChatCustomBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ChatCustomBroadcast_descriptor_;
}

const GS2C_ChatCustomBroadcast& GS2C_ChatCustomBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_ChatCustomBroadcast* GS2C_ChatCustomBroadcast::default_instance_ = NULL;

GS2C_ChatCustomBroadcast* GS2C_ChatCustomBroadcast::New() const {
  return new GS2C_ChatCustomBroadcast;
}

void GS2C_ChatCustomBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = 0;
    if (has_chat_content()) {
      if (chat_content_ != &::google::protobuf::internal::kEmptyString) {
        chat_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ChatCustomBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_content;
        break;
      }

      // required string chat_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_content().data(), this->chat_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ChatCustomBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }

  // required string chat_content = 3;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->chat_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ChatCustomBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }

  // required string chat_content = 3;
  if (has_chat_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_content().data(), this->chat_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->chat_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ChatCustomBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // required string chat_content = 3;
    if (has_chat_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ChatCustomBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ChatCustomBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ChatCustomBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ChatCustomBroadcast::MergeFrom(const GS2C_ChatCustomBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_chat_content()) {
      set_chat_content(from.chat_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ChatCustomBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ChatCustomBroadcast::CopyFrom(const GS2C_ChatCustomBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ChatCustomBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GS2C_ChatCustomBroadcast::Swap(GS2C_ChatCustomBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(chat_content_, other->chat_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ChatCustomBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ChatCustomBroadcast_descriptor_;
  metadata.reflection = GS2C_ChatCustomBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_Ready::C2GS_Ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_Ready::InitAsDefaultInstance() {
}

C2GS_Ready::C2GS_Ready(const C2GS_Ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_Ready::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_Ready::~C2GS_Ready() {
  SharedDtor();
}

void C2GS_Ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_Ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_Ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_Ready_descriptor_;
}

const C2GS_Ready& C2GS_Ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_Ready* C2GS_Ready::default_instance_ = NULL;

C2GS_Ready* C2GS_Ready::New() const {
  return new C2GS_Ready;
}

void C2GS_Ready::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_Ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_Ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_Ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_Ready::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_Ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_Ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_Ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_Ready::MergeFrom(const C2GS_Ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_Ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_Ready::CopyFrom(const C2GS_Ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_Ready::IsInitialized() const {

  return true;
}

void C2GS_Ready::Swap(C2GS_Ready* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_Ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_Ready_descriptor_;
  metadata.reflection = C2GS_Ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_Ready::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

GS2C_Ready::GS2C_Ready()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_Ready::InitAsDefaultInstance() {
}

GS2C_Ready::GS2C_Ready(const GS2C_Ready& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_Ready::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_Ready::~GS2C_Ready() {
  SharedDtor();
}

void GS2C_Ready::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_Ready::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_Ready::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_Ready_descriptor_;
}

const GS2C_Ready& GS2C_Ready::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_Ready* GS2C_Ready::default_instance_ = NULL;

GS2C_Ready* GS2C_Ready::New() const {
  return new GS2C_Ready;
}

void GS2C_Ready::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_Ready::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_Ready::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_Ready::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_Ready::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_Ready::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_Ready* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_Ready*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_Ready::MergeFrom(const GS2C_Ready& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_Ready::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_Ready::CopyFrom(const GS2C_Ready& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_Ready::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2C_Ready::Swap(GS2C_Ready* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_Ready::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_Ready_descriptor_;
  metadata.reflection = GS2C_Ready_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2GS_ReadyBroadcast::C2GS_ReadyBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_ReadyBroadcast::InitAsDefaultInstance() {
}

C2GS_ReadyBroadcast::C2GS_ReadyBroadcast(const C2GS_ReadyBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_ReadyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_ReadyBroadcast::~C2GS_ReadyBroadcast() {
  SharedDtor();
}

void C2GS_ReadyBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_ReadyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_ReadyBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_ReadyBroadcast_descriptor_;
}

const C2GS_ReadyBroadcast& C2GS_ReadyBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_ReadyBroadcast* C2GS_ReadyBroadcast::default_instance_ = NULL;

C2GS_ReadyBroadcast* C2GS_ReadyBroadcast::New() const {
  return new C2GS_ReadyBroadcast;
}

void C2GS_ReadyBroadcast::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_ReadyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2GS_ReadyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_ReadyBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_ReadyBroadcast::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_ReadyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_ReadyBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_ReadyBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_ReadyBroadcast::MergeFrom(const C2GS_ReadyBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_ReadyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_ReadyBroadcast::CopyFrom(const C2GS_ReadyBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_ReadyBroadcast::IsInitialized() const {

  return true;
}

void C2GS_ReadyBroadcast::Swap(C2GS_ReadyBroadcast* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_ReadyBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_ReadyBroadcast_descriptor_;
  metadata.reflection = C2GS_ReadyBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_ReadyBroadcast::kErrorcodeFieldNumber;
const int GS2C_ReadyBroadcast::kUidFieldNumber;
#endif  // !_MSC_VER

GS2C_ReadyBroadcast::GS2C_ReadyBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_ReadyBroadcast::InitAsDefaultInstance() {
}

GS2C_ReadyBroadcast::GS2C_ReadyBroadcast(const GS2C_ReadyBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_ReadyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_ReadyBroadcast::~GS2C_ReadyBroadcast() {
  SharedDtor();
}

void GS2C_ReadyBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_ReadyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_ReadyBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_ReadyBroadcast_descriptor_;
}

const GS2C_ReadyBroadcast& GS2C_ReadyBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_ReadyBroadcast* GS2C_ReadyBroadcast::default_instance_ = NULL;

GS2C_ReadyBroadcast* GS2C_ReadyBroadcast::New() const {
  return new GS2C_ReadyBroadcast;
}

void GS2C_ReadyBroadcast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_ReadyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_ReadyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_ReadyBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_ReadyBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_ReadyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_ReadyBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_ReadyBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_ReadyBroadcast::MergeFrom(const GS2C_ReadyBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_ReadyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_ReadyBroadcast::CopyFrom(const GS2C_ReadyBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_ReadyBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_ReadyBroadcast::Swap(GS2C_ReadyBroadcast* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_ReadyBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_ReadyBroadcast_descriptor_;
  metadata.reflection = GS2C_ReadyBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2GS_GetJuCnt::kUidFieldNumber;
#endif  // !_MSC_VER

C2GS_GetJuCnt::C2GS_GetJuCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2GS_GetJuCnt::InitAsDefaultInstance() {
}

C2GS_GetJuCnt::C2GS_GetJuCnt(const C2GS_GetJuCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2GS_GetJuCnt::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2GS_GetJuCnt::~C2GS_GetJuCnt() {
  SharedDtor();
}

void C2GS_GetJuCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2GS_GetJuCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2GS_GetJuCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2GS_GetJuCnt_descriptor_;
}

const C2GS_GetJuCnt& C2GS_GetJuCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

C2GS_GetJuCnt* C2GS_GetJuCnt::default_instance_ = NULL;

C2GS_GetJuCnt* C2GS_GetJuCnt::New() const {
  return new C2GS_GetJuCnt;
}

void C2GS_GetJuCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2GS_GetJuCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2GS_GetJuCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2GS_GetJuCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2GS_GetJuCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2GS_GetJuCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2GS_GetJuCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2GS_GetJuCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2GS_GetJuCnt::MergeFrom(const C2GS_GetJuCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2GS_GetJuCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2GS_GetJuCnt::CopyFrom(const C2GS_GetJuCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2GS_GetJuCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void C2GS_GetJuCnt::Swap(C2GS_GetJuCnt* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2GS_GetJuCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2GS_GetJuCnt_descriptor_;
  metadata.reflection = C2GS_GetJuCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2C_GetJuCnt::kErrorcodeFieldNumber;
const int GS2C_GetJuCnt::kUidFieldNumber;
const int GS2C_GetJuCnt::kJuWinFieldNumber;
const int GS2C_GetJuCnt::kJuDrawFieldNumber;
const int GS2C_GetJuCnt::kJuLoseFieldNumber;
#endif  // !_MSC_VER

GS2C_GetJuCnt::GS2C_GetJuCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2C_GetJuCnt::InitAsDefaultInstance() {
}

GS2C_GetJuCnt::GS2C_GetJuCnt(const GS2C_GetJuCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2C_GetJuCnt::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  ju_win_ = 0;
  ju_draw_ = 0;
  ju_lose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2C_GetJuCnt::~GS2C_GetJuCnt() {
  SharedDtor();
}

void GS2C_GetJuCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2C_GetJuCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2C_GetJuCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2C_GetJuCnt_descriptor_;
}

const GS2C_GetJuCnt& GS2C_GetJuCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_command_2eproto();
  return *default_instance_;
}

GS2C_GetJuCnt* GS2C_GetJuCnt::default_instance_ = NULL;

GS2C_GetJuCnt* GS2C_GetJuCnt::New() const {
  return new GS2C_GetJuCnt;
}

void GS2C_GetJuCnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    ju_win_ = 0;
    ju_draw_ = 0;
    ju_lose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2C_GetJuCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 errorcode = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required int64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ju_win;
        break;
      }

      // optional int32 ju_win = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ju_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ju_win_)));
          set_has_ju_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ju_draw;
        break;
      }

      // optional int32 ju_draw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ju_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ju_draw_)));
          set_has_ju_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ju_lose;
        break;
      }

      // optional int32 ju_lose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ju_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ju_lose_)));
          set_has_ju_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2C_GetJuCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->uid(), output);
  }

  // optional int32 ju_win = 3;
  if (has_ju_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ju_win(), output);
  }

  // optional int32 ju_draw = 4;
  if (has_ju_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ju_draw(), output);
  }

  // optional int32 ju_lose = 5;
  if (has_ju_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ju_lose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2C_GetJuCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 errorcode = 1 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }

  // required int64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->uid(), target);
  }

  // optional int32 ju_win = 3;
  if (has_ju_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ju_win(), target);
  }

  // optional int32 ju_draw = 4;
  if (has_ju_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ju_draw(), target);
  }

  // optional int32 ju_lose = 5;
  if (has_ju_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ju_lose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2C_GetJuCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 errorcode = 1 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }

    // required int64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 ju_win = 3;
    if (has_ju_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ju_win());
    }

    // optional int32 ju_draw = 4;
    if (has_ju_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ju_draw());
    }

    // optional int32 ju_lose = 5;
    if (has_ju_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ju_lose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2C_GetJuCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2C_GetJuCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2C_GetJuCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2C_GetJuCnt::MergeFrom(const GS2C_GetJuCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ju_win()) {
      set_ju_win(from.ju_win());
    }
    if (from.has_ju_draw()) {
      set_ju_draw(from.ju_draw());
    }
    if (from.has_ju_lose()) {
      set_ju_lose(from.ju_lose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2C_GetJuCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2C_GetJuCnt::CopyFrom(const GS2C_GetJuCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2C_GetJuCnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GS2C_GetJuCnt::Swap(GS2C_GetJuCnt* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(uid_, other->uid_);
    std::swap(ju_win_, other->ju_win_);
    std::swap(ju_draw_, other->ju_draw_);
    std::swap(ju_lose_, other->ju_lose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2C_GetJuCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2C_GetJuCnt_descriptor_;
  metadata.reflection = GS2C_GetJuCnt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
